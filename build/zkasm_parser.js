/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,49],$V5=[1,28],$V6=[1,30],$V7=[1,14],$V8=[1,15],$V9=[1,17],$Va=[1,38],$Vb=[1,16],$Vc=[1,29],$Vd=[1,19],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,31],$Vi=[1,47],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,32],$Vr=[1,33],$Vs=[1,34],$Vt=[1,35],$Vu=[1,36],$Vv=[1,37],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[1,44],$VC=[1,45],$VD=[1,46],$VE=[1,48],$VF=[1,50],$VG=[1,51],$VH=[1,52],$VI=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,36,63,64,65,69,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VJ=[1,66],$VK=[1,67],$VL=[1,68],$VM=[1,69],$VN=[1,70],$VO=[1,71],$VP=[1,72],$VQ=[1,73],$VR=[1,74],$VS=[1,75],$VT=[1,76],$VU=[1,77],$VV=[1,78],$VW=[1,79],$VX=[1,80],$VY=[1,81],$VZ=[1,82],$V_=[1,83],$V$=[1,84],$V01=[1,85],$V11=[1,86],$V21=[1,87],$V31=[1,92],$V41=[1,93],$V51=[1,94],$V61=[1,95],$V71=[1,96],$V81=[1,97],$V91=[1,98],$Va1=[1,99],$Vb1=[1,100],$Vc1=[1,101],$Vd1=[1,102],$Ve1=[1,103],$Vf1=[1,104],$Vg1=[1,105],$Vh1=[1,106],$Vi1=[1,107],$Vj1=[1,108],$Vk1=[1,109],$Vl1=[1,110],$Vm1=[1,111],$Vn1=[1,112],$Vo1=[1,113],$Vp1=[1,114],$Vq1=[1,115],$Vr1=[1,116],$Vs1=[1,117],$Vt1=[1,122],$Vu1=[1,123],$Vv1=[1,124],$Vw1=[1,125],$Vx1=[1,126],$Vy1=[1,127],$Vz1=[1,134],$VA1=[1,135],$VB1=[1,136],$VC1=[1,137],$VD1=[1,138],$VE1=[1,139],$VF1=[1,118],$VG1=[1,119],$VH1=[1,120],$VI1=[1,121],$VJ1=[1,128],$VK1=[1,129],$VL1=[1,130],$VM1=[1,131],$VN1=[1,132],$VO1=[1,133],$VP1=[13,15],$VQ1=[13,15,35,36,59],$VR1=[1,150],$VS1=[13,15,35,36,37,59],$VT1=[13,15,35,36,37,59,70],$VU1=[1,159],$VV1=[13,70],$VW1=[1,206],$VX1=[1,207],$VY1=[1,204],$VZ1=[1,205],$V_1=[1,218],$V$1=[1,214],$V02=[1,215],$V12=[1,216],$V22=[1,217],$V32=[1,222],$V42=[1,242],$V52=[1,243],$V62=[1,247],$V72=[1,249],$V82=[1,248],$V92=[1,250],$Va2=[1,251],$Vb2=[1,252],$Vc2=[1,268],$Vd2=[1,258],$Ve2=[1,259],$Vf2=[1,260],$Vg2=[1,261],$Vh2=[1,262],$Vi2=[1,263],$Vj2=[1,264],$Vk2=[1,265],$Vl2=[1,266],$Vm2=[1,267],$Vn2=[13,15,70],$Vo2=[1,275],$Vp2=[1,276],$Vq2=[22,35,36,57,70],$Vr2=[22,35,36,37,57,70],$Vs2=[57,70],$Vt2=[1,326],$Vu2=[1,327],$Vv2=[1,328],$Vw2=[1,329],$Vx2=[1,330],$Vy2=[1,331],$Vz2=[1,332],$VA2=[1,333],$VB2=[1,334],$VC2=[1,335],$VD2=[1,336],$VE2=[1,337],$VF2=[1,338],$VG2=[1,339],$VH2=[1,340],$VI2=[1,341],$VJ2=[1,342],$VK2=[1,343],$VL2=[1,344],$VM2=[1,345],$VN2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VO2=[1,354],$VP2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,63,64,65,69,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VQ2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VR2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VS2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],$VT2=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,50,51,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"LABEL":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"assignment":14,":":15,"opList":16,"VAR":17,"scope":18,"IDENTIFIER":19,"[":20,"NUMBER":21,"]":22,"CONSTID":23,"CONST":24,"=":25,"nexpr":26,"CONSTL":27,"COMMAND":28,"GLOBAL":29,"CTX":30,"INCLUDE":31,"STRING":32,"NUMBERL":33,"??":34,"+":35,"-":36,"*":37,"**":38,"%":39,"/":40,"<<":41,">>":42,"|":43,"&":44,"^":45,"<":46,">":47,"<=":48,">=":49,"==":50,"!=":51,"&&":52,"||":53,"!":54,"?":55,"(":56,")":57,"inRegsSum":58,"=>":59,"destinationsList":60,"inRegP":61,"inReg":62,"TAG":63,"TAG_0":64,"TAG_BYTE":65,"reg":66,"mem_addr":67,"counter":68,"REFERENCE":69,",":70,"saveRegsList":71,"saveReg":72,"op":73,"MLOAD":74,"addr":75,"F_MLOAD":76,"MSTORE":77,"F_HASHK":78,"hashId":79,"F_HASHKn":80,"HASHK":81,"HASHKn":82,"HASHKLEN":83,"HASHKDIGEST":84,"F_HASHS":85,"F_HASHSn":86,"HASHS":87,"HASHSn":88,"HASHSLEN":89,"HASHSDIGEST":90,"F_HASHP":91,"F_HASHPn":92,"HASHP":93,"HASHPn":94,"HASHPLEN":95,"HASHPDIGEST":96,"JMP":97,"jmp_addr":98,"jmpNotCond":99,"jmpCond":100,"jmpNotCondConst":101,"jmpCondConst":102,"CALL":103,"RETURN":104,"ASSERT":105,"SLOAD":106,"SSTORE":107,"ARITH":108,"ARITH_ECADD_DIFFERENT":109,"ARITH_ECADD_SAME":110,"ARITH_BN254_MULFP2":111,"ARITH_BN254_ADDFP2":112,"ARITH_BN254_SUBFP2":113,"ARITH_MOD":114,"ADD":115,"SUB":116,"LT":117,"SLT":118,"EQ":119,"AND":120,"OR":121,"XOR":122,"LT4":123,"MEM_ALIGN_RD":124,"MEM_ALIGN_WR":125,"REPEAT":126,"RCX":127,"SAVE":128,"RESTORE":129,"JMPN":130,"JMPC":131,"JMPZ":132,"CALL_Z":133,"CALL_N":134,"CALL_C":135,"JMP_EQ":136,"JMP_LT":137,"JMP_LE":138,"CALL_EQ":139,"CALL_LT":140,"CALL_LE":141,"JMPNC":142,"JMPNZ":143,"CALL_NC":144,"CALL_NZ":145,"JMP_NE":146,"JMP_GT":147,"JMP_GE":148,"CALL_NE":149,"CALL_GT":150,"CALL_GE":151,"CNT_ARITH":152,"CNT_BINARY":153,"CNT_KECCAK_F":154,"CNT_SHA256_F":155,"CNT_MEM_ALIGN":156,"CNT_PADDING_PG":157,"CNT_POSEIDON_G":158,"A":159,"B":160,"C":161,"D":162,"E":163,"SR":164,"SP":165,"PC":166,"GAS":167,"RR":168,"zkPC":169,"STEP":170,"HASHPOS":171,"ROTL_C":172,"RID":173,"++":174,"--":175,"SYS":176,"array_index":177,"MEM":178,"STACK":179,"short_const_value":180,"array_index_item":181,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"LABEL",13:"LF",15:":",17:"VAR",19:"IDENTIFIER",20:"[",21:"NUMBER",22:"]",23:"CONSTID",24:"CONST",25:"=",27:"CONSTL",28:"COMMAND",29:"GLOBAL",30:"CTX",31:"INCLUDE",32:"STRING",33:"NUMBERL",34:"??",35:"+",36:"-",37:"*",38:"**",39:"%",40:"/",41:"<<",42:">>",43:"|",44:"&",45:"^",46:"<",47:">",48:"<=",49:">=",50:"==",51:"!=",52:"&&",53:"||",54:"!",55:"?",56:"(",57:")",59:"=>",63:"TAG",64:"TAG_0",65:"TAG_BYTE",69:"REFERENCE",70:",",74:"MLOAD",76:"F_MLOAD",77:"MSTORE",78:"F_HASHK",80:"F_HASHKn",81:"HASHK",82:"HASHKn",83:"HASHKLEN",84:"HASHKDIGEST",85:"F_HASHS",86:"F_HASHSn",87:"HASHS",88:"HASHSn",89:"HASHSLEN",90:"HASHSDIGEST",91:"F_HASHP",92:"F_HASHPn",93:"HASHP",94:"HASHPn",95:"HASHPLEN",96:"HASHPDIGEST",97:"JMP",103:"CALL",104:"RETURN",105:"ASSERT",106:"SLOAD",107:"SSTORE",108:"ARITH",109:"ARITH_ECADD_DIFFERENT",110:"ARITH_ECADD_SAME",111:"ARITH_BN254_MULFP2",112:"ARITH_BN254_ADDFP2",113:"ARITH_BN254_SUBFP2",114:"ARITH_MOD",115:"ADD",116:"SUB",117:"LT",118:"SLT",119:"EQ",120:"AND",121:"OR",122:"XOR",123:"LT4",124:"MEM_ALIGN_RD",125:"MEM_ALIGN_WR",126:"REPEAT",127:"RCX",128:"SAVE",129:"RESTORE",130:"JMPN",131:"JMPC",132:"JMPZ",133:"CALL_Z",134:"CALL_N",135:"CALL_C",136:"JMP_EQ",137:"JMP_LT",138:"JMP_LE",139:"CALL_EQ",140:"CALL_LT",141:"CALL_LE",142:"JMPNC",143:"JMPNZ",144:"CALL_NC",145:"CALL_NZ",146:"JMP_NE",147:"JMP_GT",148:"JMP_GE",149:"CALL_NE",150:"CALL_GT",151:"CALL_GE",152:"CNT_ARITH",153:"CNT_BINARY",154:"CNT_KECCAK_F",155:"CNT_SHA256_F",156:"CNT_MEM_ALIGN",157:"CNT_PADDING_PG",158:"CNT_POSEIDON_G",159:"A",160:"B",161:"C",162:"D",163:"E",164:"SR",165:"SP",166:"PC",167:"GAS",168:"RR",169:"zkPC",170:"STEP",171:"HASHPOS",172:"ROTL_C",173:"RID",174:"++",175:"--",176:"SYS",178:"MEM",179:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[9,3],[9,6],[9,6],[10,4],[10,4],[12,1],[18,1],[18,1],[11,2],[26,1],[26,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,5],[26,3],[14,3],[14,1],[58,3],[58,3],[58,2],[58,1],[61,3],[61,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,3],[62,3],[62,1],[62,1],[62,1],[62,1],[60,3],[60,3],[60,1],[60,1],[71,3],[71,1],[16,3],[16,1],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,4],[73,6],[73,4],[73,6],[73,6],[73,8],[73,6],[73,8],[73,4],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,4],[73,4],[73,4],[73,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[99,1],[99,1],[99,1],[99,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[75,1],[75,3],[75,3],[75,2],[75,2],[75,3],[75,3],[75,3],[75,4],[75,4],[75,4],[75,4],[75,1],[75,3],[75,3],[75,3],[98,1],[98,1],[98,1],[98,3],[98,3],[180,1],[180,1],[177,3],[177,3],[177,1],[181,1],[181,1],[181,1],[181,3],[181,3],[181,3],[181,3],[67,1],[67,4],[67,4],[67,4],[67,4],[79,1],[79,3],[79,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 6: case 7: case 8: case 9:

            this.$ = $$[$0];
        
break;
case 5:

            this.$ = {type: "label", identifier: $$[$0]};
            setLine(this.$, _$[$0])

        
break;
case 10:

            this.$ = null;
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 13:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 14:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 15: case 16:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 17:
            
            // yy.parser.defineConstant($$[$0-2], 'CONST', $$[$0], _$[$0-3].first_line);
            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 18:

            // yy.parser.defineConstant($$[$0-2], 'CONSTL', $$[$0], _$[$0-3].first_line);
            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 19:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 22:

            this.$ = {type: "include", file: $$[$0]}
            setLine(this.$, _$[$0-1])
        
break;
case 23: case 24:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 25: case 68:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 26:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 33: case 47:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 48:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 49:

            this.$ = $$[$0-1]
        
break;
case 50:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 51:

            this.$ = {in: $$[$0], out: []}
        
break;
case 52:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 53:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 54:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 55: case 57: case 217:

            this.$ = $$[$0]
        
break;
case 56:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 58:

            this.$ = {type: 'TAG' , tag: $$[$0] }
        
break;
case 59:

            this.$ = {type: 'TAG_0' , tag: $$[$0] }
        
break;
case 60:

            this.$ = {type: 'TAG_BYTE' , tag: $$[$0] }
        
break;
case 61:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 62:

            this.$ = {type: 'F_MLOAD', addr: $$[$0]}
            normalizeArrayIndex(this.$.addr, 'memUseAddrRel');
        
break;
case 63:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 64:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 65:

            this.$ = {type: "expl", values: [$$[$0-2], $$[$0]]}
        
break;
case 66:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 67:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 69:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 70:

            $$[$0-2].push({type: 'REG', reg:$$[$0]})
        
break;
case 71:

            normalizeArrayIndex($$[$0]);
            $$[$0-2].push({type: 'MSTORE', addr:{...$$[$0], assumeFree: 0}})
        
break;
case 72:

            normalizeArrayIndex($$[$0]);
            this.$ = [{type: 'MSTORE', addr:{...$$[$0], assumeFree: 0}}]
        
break;
case 73:

            this.$ = [{type: 'REG', reg:$$[$0]}]
        
break;
case 74:

            $$[$0-2].push($$[$0])
        
break;
case 75: case 77:

            this.$ = [$$[$0]]
        
break;
case 76:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 78:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');            
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 0, assumeFree: 0 };
        
break;
case 79:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 0, assumeFree: 1 };
        
break;
case 80:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 1, assumeFree: 0 };
        
break;
case 81:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 1;
        
break;
case 82:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 1;
        
break;
case 83:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 0;
        
break;
case 84:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 0;
        
break;
case 85:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashKLen = 1;
        
break;
case 86:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashKDigest = 1;
        
break;
case 87:

            this.$ = $$[$0-1];
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashS = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 1;
        
break;
case 88:

            this.$ = $$[$0-1];
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashS = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 1;
        
break;
case 89:

            this.$ = $$[$0-1];
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashS = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 0;
        
break;
case 90:

            this.$ = $$[$0-1];
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashS = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 0;
        
break;
case 91:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashSLen = 1;
        
break;
case 92:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashSDigest = 1;
        
break;
case 93:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashK = 0;
            this.$.hashP = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 1;
        
break;
case 94:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashK = 0;
            this.$.hashP = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 1;
        
break;
case 95:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashK = 0;
            this.$.hashP = 1;
            this.$.hashBytesInD = 1;
            this.$.hashBytes = 0;
            this.$.assumeFree = 0;
        
break;
case 96:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashK = 0;
            this.$.hashP = 1;
            this.$.hashBytesInD = 0;
            this.$.hashBytes = Number($$[$0-3]);
            this.$.assumeFree = 0;
        
break;
case 97:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashPLen = 1;
        
break;
case 98:

            this.$ = $$[$0-1];
            this.$.hashS = 0;
            this.$.hashP = 0;
            this.$.hashK = 0;
            this.$.hashPDigest = 1;
        
break;
case 99:

            this.$ = {...JMP_FLAGS, JMP: 1, ...applyAddrRel('jmp', $$[$0-1]) }
        
break;
case 100:

            this.$ = { ...JMP_FLAGS,  ...$$[$0-3], ...applyAddrRel('else', $$[$0-1]), jmpAddr: 0, jmpAddrLabel: 'next' }
        
break;
case 101:

            {
                let _else = applyAddrRel('else', $$[$0-3]);
                let _jmp = applyAddrRel('jmp', $$[$0-1]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = { ...JMP_FLAGS, ...$$[$0-5], ..._jmp, ..._else }            
            }
        
break;
case 102:
   
            this.$ = {...JMP_FLAGS, ...$$[$0-3], ...applyAddrRel('jmp', $$[$0-1]), elseAddr: 0, elseAddrLabel: 'next' };
        
break;
case 103:

            {
                let _else = applyAddrRel('else', $$[$0-1]);
                let _jmp = applyAddrRel('jmp', $$[$0-3]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = {...JMP_FLAGS, ...$$[$0-5], ..._jmp, ..._else };
            }
        
break;
case 104:

            this.$ = { ...JMP_FLAGS,  ...$$[$0-5], ...applyAddrRel('else', $$[$0-1]), jmpAddr: 0, jmpAddrLabel: 'next', ...applyCondConst($$[$0-5], $$[$0-3])};
        
break;
case 105:

            {
                let _else = applyAddrRel('else', $$[$0-3]);
                let _jmp = applyAddrRel('jmp', $$[$0-1]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = { ...JMP_FLAGS, ...$$[$0-7], ..._jmp, ..._else, ...applyCondConst($$[$0-7], $$[$0-5])}

            }
        
break;
case 106:
   
            this.$ = {...JMP_FLAGS, ...$$[$0-5], ...applyAddrRel('jmp', $$[$0-1]), elseAddr: 0, elseAddrLabel: 'next', 
                  ...applyCondConst($$[$0-5], $$[$0-3])};
        
break;
case 107:

            {
                let _else = applyAddrRel('else', $$[$0-1]);
                let _jmp = applyAddrRel('jmp', $$[$0-3]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = {...JMP_FLAGS, ...$$[$0-7], ..._jmp, ..._else, ...applyCondConst($$[$0-7], $$[$0-5])}
            }
        
break;
case 108:

            this.$ = {...JMP_FLAGS, JMP: 1, call: 1, ...applyAddrRel('jmp', $$[$0-1]) }
        
break;
case 109:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  call: 0, return: 1}
        
break;
case 110:

            this.$ = {assert: 1}
        
break;
case 111:

            this.$ = {sRD: 1}
        
break;
case 112:

            this.$ = {sWR: 1}
        
break;
case 113:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 0, arithEquation: 1 }
        
break;
case 114:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 1, arithEquation: 2 }
        
break;
case 115:

            this.$ = { arith: 1, arithSame12: 1, arithUseE: 1, arithEquation: 3 }
        
break;
case 116:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 1, arithEquation: 4 }
        
break;
case 117:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 1, arithEquation: 5 }
        
break;
case 118:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 1, arithEquation: 6 }
        
break;
case 119:

            this.$ = { arith: 1, arithSame12: 0, arithUseE: 0, arithEquation: 7 }
        
break;
case 120:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 121:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 122:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 123:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 124:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 125:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 126:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 127:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 128:

            this.$ = { bin: 1, binOpcode: 8}
        
break;
case 129:

            this.$ = { memAlignRD: 1, memAlignWR: 0 }
        
break;
case 130:

            this.$ = { memAlignRD: 0, memAlignWR: 1 }
        
break;
case 131:

            this.$ = { repeat: 1 }
        
break;
case 132:

            this.$ = { save: 1, restore: 0, regs: $$[$0-1] }
        
break;
case 133:

            this.$ = { save: 0, restore: 1, regs: $$[$0-1] }
        
break;
case 134:

            this.$ = { save: 0, restore: 1, regs: false }
        
break;
case 135:
 this.$ = { JMPN: 1, free0IsByte: 0 } 
break;
case 136: case 147:
 this.$ = { JMPC: 1 } 
break;
case 137: case 148:
 this.$ = { JMPZ: 1 } 
break;
case 138: case 150:
 this.$ = { JMPZ: 1, call: 1 } 
break;
case 139:
 this.$ = { JMPN: 1, call: 1, free0IsByte: 0 } 
break;
case 140: case 149:
 this.$ = { JMPC: 1, call: 1 } 
break;
case 141: case 151:
 this.$ = { JMPZ: 1, condConst:  0 } 
break;
case 142: case 153:
 this.$ = { JMPN: 1, condConst:  0, free0IsByte: 0 } 
break;
case 143: case 152:
 this.$ = { JMPN: 1, condConst: -1, free0IsByte: 0 } 
break;
case 144: case 154:
 this.$ = { JMPZ: 1, condConst:  0, call: 1 } 
break;
case 145: case 156:
 this.$ = { JMPN: 1, condConst:  0, call: 1, free0IsByte: 0 } 
break;
case 146: case 155:
 this.$ = { JMPN: 1, condConst: -1, call: 1, free0IsByte: 0 } 
break;
case 157:
 this.$ = 'cntArith' 
break;
case 158:
 this.$ = 'cntBinary' 
break;
case 159:
 this.$ = 'cntKeccakF' 
break;
case 160:
 this.$ = 'cntSha256F' 
break;
case 161:
 this.$ = 'cntMemAlign' 
break;
case 162:
 this.$ = 'cntPaddingPG' 
break;
case 163:
 this.$ = 'cntPoseidonG' 
break;
case 192:

            this.$ = { isStack: 1, isMem:0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 193:

            this.$ = { isStack: 1, isMem:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 194:

            this.$ = { isStack: 1, isMem:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 195:

            this.$ = { isStack: 1, isMem:0, incStack: 1, offset: 0, useCTX: 1}
        
break;
case 196:

            this.$ = { isStack: 1, isMem:0, incStack: -1, offset: 0, useCTX: 1}
        
break;
case 197:
            
            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 198:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 199:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 200:

            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 201:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 202:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 203:

            this.$ = { offsetLabel: $$[$0-3], ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 204:

            this.$ = { offsetLabel: $$[$0], offset: 0 }
        
break;
case 205:

            this.$ = { offsetLabel: $$[$0-2], offset: 0, memUseAddrRel: 1, ind: 0, indRR: 1 }
        
break;
case 206:

            this.$ = { offsetLabel: $$[$0-2], offset: 0, memUseAddrRel: 1, ind: 1, indRR: 0 }
        
break;
case 207:

            this.$ = { offsetLabel: $$[$0-2], offset: $$[$0] }
        
break;
case 208:

            this.$ = { ...$$[$0] }
        
break;
case 209: case 225:

            this.$ = { offsetLabel: $$[$0] }
        
break;
case 210:
   
            this.$ = { offsetLabel: $$[$0] }
        
break;
case 211:
   
            {
                let _aindex = { ...$$[$0] };
                delete _aindex._fk;
                this.$ = { offsetLabel: $$[$0-2], ..._aindex }
            }
        
break;
case 212:

            {
                let _aindex = { ...$$[$0] };

                if (typeof _aindex[_aindex._fk] === 'number') {
                    _aindex[_aindex._fk] = - _aindex[_aindex._fk];
                } else {
                    _aindex[_aindex._fk] = { type: 'neg', values: [_aindex[_aindex._fk]]};
                }
                delete _aindex._fk;
                this.$ = { offsetLabel: $$[$0-2], ..._aindex }
            }
        
break;
case 213:

            this.$ = {type: 'CONST' , const: Number($$[$0]) }
        
break;
case 214:

            this.$ = {type: 'CONSTID' , identifier: $$[$0] }
        
break;
case 215:

            Object.keys($$[$0]).forEach(k => {
                if (!k.startsWith('_') && (k !== 'useAddrRel' || !lodash.isEqual($$[$0-2][k], $$[$0][k]))) {
                    if ($$[$0-2][k] && $$[$0-2][k].const !== 0) {
                        this.compiler._error(`Property ${k} already used`);
                    }
                    $$[$0-2][k] = $$[$0][k];
                }
            });
            this.$ = $$[$0-2];
        
break;
case 216:

            Object.keys($$[$0]).forEach(k => {
                if (!k.startsWith('_') && (k !== 'useAddrRel' || !lodash.isEqual($$[$0-2][k], $$[$0][k]))) {
                    if ($$[$0-2][k] && $$[$0-2][k].const !== 0) {
                        this.compiler._error(`Property ${k} already used`);
                    }
                    if (k === $$[$0]._fk) {
                        $$[$0-2][k] = typeof $$[$0][k] === 'number' ? -$$[$0][k] : {type: 'neg', values: [$$[$0][k]]};
                    } else {
                        $$[$0-2][k] = $$[$0][k];
                    }
                }
            });
            this.$ = $$[$0-2];
        
break;
case 218:

            this.$ = { _fk: 'offset', offset: $$[$0] }
        
break;
case 219:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: 1 }
        
break;
case 220:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: 1 }            
        
break;
case 221:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: $$[$0-2] }
        
break;
case 222:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: $$[$0-2] }
        
break;
case 223:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: $$[$0] }
        
break;
case 224:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: $$[$0] }
        
break;
case 226:

            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 227:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 228:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 229:

            this.$ = { offsetLabel: $$[$0-3], ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 230:

            this.$ = { hashOffset: 0 }
        
break;
case 231:

            this.$ = { hashOffset:$$[$0] }
        
break;
case 232:

            this.$ = { hashOffset: -$$[$0] }
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:6,10:7,11:8,12:9,13:$V1,14:11,15:$V2,17:$V3,19:$V4,21:$V5,23:$V6,24:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,33:$Vc,36:$Vd,58:18,61:20,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},{1:[3]},{5:[1,60],6:61,7:4,8:$V0,9:6,10:7,11:8,12:9,13:$V1,14:11,15:$V2,17:$V3,19:$V4,21:$V5,23:$V6,24:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,33:$Vc,36:$Vd,58:18,61:20,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},o($VI,[2,3]),o($VI,[2,4]),o($VI,[2,5]),o($VI,[2,6]),o($VI,[2,7]),o($VI,[2,8]),o($VI,[2,9]),o($VI,[2,10]),{13:[1,63],15:[1,62]},{16:64,73:65,74:$VJ,76:$VK,77:$VL,78:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,99:88,100:89,101:90,102:91,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,115:$Vf1,116:$Vg1,117:$Vh1,118:$Vi1,119:$Vj1,120:$Vk1,121:$Vl1,122:$Vm1,123:$Vn1,124:$Vo1,125:$Vp1,126:$Vq1,128:$Vr1,129:$Vs1,130:$Vt1,131:$Vu1,132:$Vv1,133:$Vw1,134:$Vx1,135:$Vy1,136:$Vz1,137:$VA1,138:$VB1,139:$VC1,140:$VD1,141:$VE1,142:$VF1,143:$VG1,144:$VH1,145:$VI1,146:$VJ1,147:$VK1,148:$VL1,149:$VM1,150:$VN1,151:$VO1},{18:140,29:[1,141],30:[1,142]},{23:[1,143]},{23:[1,144]},{32:[1,145]},o($VI,[2,19]),o($VP1,[2,51],{35:[1,147],36:[1,148],59:[1,146]}),{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:149,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},o($VQ1,[2,55],{37:$VR1}),o($VS1,[2,57]),o($VS1,[2,58]),o($VS1,[2,59]),o($VS1,[2,60]),o($VS1,[2,61]),o($VS1,[2,62]),o($VS1,[2,63]),o($VS1,[2,66],{38:[1,151]}),o($VS1,[2,67],{38:[1,152]}),o($VS1,[2,68]),o($VS1,[2,69]),o($VT1,[2,164]),o($VT1,[2,165]),o($VT1,[2,166]),o($VT1,[2,167]),o($VT1,[2,168]),o($VT1,[2,169]),o($VT1,[2,170]),o($VT1,[2,171]),o($VT1,[2,172]),o($VT1,[2,173]),o($VT1,[2,174]),o($VT1,[2,175]),o($VT1,[2,176]),o($VT1,[2,177]),o($VT1,[2,178]),o($VT1,[2,179]),o($VT1,[2,180]),o($VT1,[2,225],{20:[1,153]}),{20:[1,154]},{20:[1,155]},{20:[1,156]},o($VS1,[2,157]),o($VS1,[2,158]),o($VS1,[2,159]),o($VS1,[2,160]),o($VS1,[2,161]),o($VS1,[2,162]),o($VS1,[2,163]),{1:[2,1]},o($VI,[2,2]),{16:157,73:65,74:$VJ,76:$VK,77:$VL,78:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,99:88,100:89,101:90,102:91,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,115:$Vf1,116:$Vg1,117:$Vh1,118:$Vi1,119:$Vj1,120:$Vk1,121:$Vl1,122:$Vm1,123:$Vn1,124:$Vo1,125:$Vp1,126:$Vq1,128:$Vr1,129:$Vs1,130:$Vt1,131:$Vu1,132:$Vv1,133:$Vw1,134:$Vx1,135:$Vy1,136:$Vz1,137:$VA1,138:$VB1,139:$VC1,140:$VD1,141:$VE1,142:$VF1,143:$VG1,144:$VH1,145:$VI1,146:$VJ1,147:$VK1,148:$VL1,149:$VM1,150:$VN1,151:$VO1},o($VI,[2,12]),{13:[1,158],70:$VU1},o($VV1,[2,77]),{56:[1,160]},{56:[1,161]},{56:[1,162]},{56:[1,163]},{56:[1,164]},{56:[1,165]},{56:[1,166]},{56:[1,167]},{56:[1,168]},{56:[1,169]},{56:[1,170]},{56:[1,171]},{56:[1,172]},{56:[1,173]},{56:[1,174]},{56:[1,175]},{56:[1,176]},{56:[1,177]},{56:[1,178]},{56:[1,179]},{56:[1,180]},{56:[1,181]},{56:[1,182]},{56:[1,183]},{56:[1,184]},{56:[1,185]},{56:[1,186]},o($VV1,[2,109]),o($VV1,[2,110]),o($VV1,[2,111]),o($VV1,[2,112]),o($VV1,[2,113]),o($VV1,[2,114]),o($VV1,[2,115]),o($VV1,[2,116]),o($VV1,[2,117]),o($VV1,[2,118]),o($VV1,[2,119]),o($VV1,[2,120]),o($VV1,[2,121]),o($VV1,[2,122]),o($VV1,[2,123]),o($VV1,[2,124]),o($VV1,[2,125]),o($VV1,[2,126]),o($VV1,[2,127]),o($VV1,[2,128]),o($VV1,[2,129]),o($VV1,[2,130]),{56:[1,187]},{56:[1,188]},o($VV1,[2,134],{56:[1,189]}),{56:[2,147]},{56:[2,148]},{56:[2,149]},{56:[2,150]},{56:[2,135]},{56:[2,136]},{56:[2,137]},{56:[2,138]},{56:[2,139]},{56:[2,140]},{56:[2,151]},{56:[2,152]},{56:[2,153]},{56:[2,154]},{56:[2,155]},{56:[2,156]},{56:[2,141]},{56:[2,142]},{56:[2,143]},{56:[2,144]},{56:[2,145]},{56:[2,146]},{19:[1,190]},{19:[2,20]},{19:[2,21]},{25:[1,191]},{25:[1,192]},o($VI,[2,22]),{19:$V4,30:$Va,60:193,66:195,67:194,127:$Vi,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:196,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:197,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},o($VQ1,[2,54],{37:$VR1}),{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,62:198,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:27,69:$Vh,127:$Vi,152:$Vj,153:$Vk,154:$Vl,155:$Vm,156:$Vn,157:$Vo,158:$Vp,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},{21:[1,199]},{33:[1,200]},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:201,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:208,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:209,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:210,180:203,181:202},{13:[1,211],70:$VU1},o($VI,[2,13]),{73:212,74:$VJ,76:$VK,77:$VL,78:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,99:88,100:89,101:90,102:91,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,115:$Vf1,116:$Vg1,117:$Vh1,118:$Vi1,119:$Vj1,120:$Vk1,121:$Vl1,122:$Vm1,123:$Vn1,124:$Vo1,125:$Vp1,126:$Vq1,128:$Vr1,129:$Vs1,130:$Vt1,131:$Vu1,132:$Vv1,133:$Vw1,134:$Vx1,135:$Vy1,136:$Vz1,137:$VA1,138:$VB1,139:$VC1,140:$VD1,141:$VE1,142:$VF1,143:$VG1,144:$VH1,145:$VI1,146:$VJ1,147:$VK1,148:$VL1,149:$VM1,150:$VN1,151:$VO1},{19:$V_1,75:213,165:$V$1,176:$V02,178:$V12,179:$V22},{19:$V_1,75:219,165:$V$1,176:$V02,178:$V12,179:$V22},{19:$V_1,75:220,165:$V$1,176:$V02,178:$V12,179:$V22},{79:221,163:$V32},{79:223,163:$V32},{79:224,163:$V32},{79:225,163:$V32},{79:226,163:$V32},{79:227,163:$V32},{79:228,163:$V32},{79:229,163:$V32},{79:230,163:$V32},{79:231,163:$V32},{79:232,163:$V32},{79:233,163:$V32},{79:234,163:$V32},{79:235,163:$V32},{79:236,163:$V32},{79:237,163:$V32},{79:238,163:$V32},{79:239,163:$V32},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:240,163:$VY1,168:$VZ1,177:241,180:203,181:202},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:244,163:$VY1,168:$VZ1,177:241,180:203,181:202},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:245,163:$VY1,168:$VZ1,177:241,180:203,181:202},{21:$V62,23:$V72,26:246,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:253,33:$V82,36:$V92,54:$Va2,56:$Vb2},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:254,163:$VY1,168:$VZ1,177:241,180:203,181:202},{127:[1,255]},{71:256,72:257,127:$Vc2,159:$Vd2,160:$Ve2,161:$Vf2,162:$Vg2,163:$Vh2,164:$Vi2,165:$Vj2,166:$Vk2,168:$Vl2,171:$Vm2},{71:269,72:257,127:$Vc2,159:$Vd2,160:$Ve2,161:$Vf2,162:$Vg2,163:$Vh2,164:$Vi2,165:$Vj2,166:$Vk2,168:$Vl2,171:$Vm2},o($VI,[2,14],{20:[1,270]}),{21:$V62,23:$V72,26:271,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:272,33:$V82,36:$V92,54:$Va2,56:$Vb2},o($VP1,[2,50],{70:[1,273]}),o($Vn2,[2,72]),o($Vn2,[2,73]),o($VQ1,[2,52],{37:$VR1}),o($VQ1,[2,53],{37:$VR1}),o($VS1,[2,56]),o($VS1,[2,64]),o($VS1,[2,65]),{22:[1,274],35:$Vo2,36:$Vp2},o($Vq2,[2,217]),o($Vq2,[2,218],{37:[1,277]}),o($Vq2,[2,219],{37:[1,278]}),o($Vq2,[2,220],{37:[1,279]}),o($Vr2,[2,213]),o($Vr2,[2,214]),{22:[1,280],35:$Vo2,36:$Vp2},{22:[1,281],35:$Vo2,36:$Vp2},{22:[1,282],35:$Vo2,36:$Vp2},o($VI,[2,11]),o($VV1,[2,76]),{57:[1,283]},{35:[1,284],36:[1,285],57:[2,192],174:[1,286],175:[1,287]},{15:[1,288],20:[1,289]},{15:[1,290],20:[1,291]},{15:[1,292],20:[1,293]},{20:[1,294],35:[1,295],57:[2,204]},{57:[1,296]},{57:[1,297]},{57:[1,298]},{35:[1,299],36:[1,300],57:[2,230]},{57:[1,301]},{57:[1,302]},{57:[1,303]},{57:[1,304]},{57:[1,305]},{57:[1,306]},{57:[1,307]},{57:[1,308]},{57:[1,309]},{57:[1,310]},{57:[1,311]},{57:[1,312]},{57:[1,313]},{57:[1,314]},{57:[1,315]},{57:[1,316]},{57:[1,317]},{57:[1,318]},o($Vs2,[2,208],{35:$Vo2,36:$Vp2}),o($Vs2,[2,209]),o($Vs2,[2,210],{35:[1,319],36:[1,320]}),{57:[1,321],70:[1,322]},{57:[1,323],70:[1,324]},{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2,70:[1,325]},o($VN2,[2,23]),o($VN2,[2,24]),o($VN2,[2,25],{34:[1,346]}),{21:$V62,23:$V72,26:347,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:348,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:349,33:$V82,36:$V92,54:$Va2,56:$Vb2},{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2,70:[1,350]},{57:[1,351]},{57:[1,352]},{57:[1,353],70:$VO2},o($Vs2,[2,75]),o($Vs2,[2,181]),o($Vs2,[2,182]),o($Vs2,[2,183]),o($Vs2,[2,184]),o($Vs2,[2,185]),o($Vs2,[2,186]),o($Vs2,[2,187]),o($Vs2,[2,188]),o($Vs2,[2,189]),o($Vs2,[2,190]),o($Vs2,[2,191]),{57:[1,355],70:$VO2},{21:[1,356],23:[1,357]},o($VP2,[2,17],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2}),o($VP2,[2,18],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2}),{19:$V4,30:$Va,66:358,67:359,127:$Vi,159:$Vq,160:$Vr,161:$Vs,162:$Vt,163:$Vu,164:$Vv,165:$Vw,166:$Vx,167:$Vy,168:$Vz,169:$VA,170:$VB,171:$VC,172:$VD,173:$VE,176:$VF,178:$VG,179:$VH},o($VT1,[2,229]),{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,180:203,181:360},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,180:203,181:361},{163:[1,362],168:[1,363]},{21:$VW1,23:$VX1,180:364},{21:$VW1,23:$VX1,180:365},o($VT1,[2,226]),o($VT1,[2,227]),o($VT1,[2,228]),o($VV1,[2,78]),{21:[1,366]},{21:[1,367]},{57:[2,195]},{57:[2,196]},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:368,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:369,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:370,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:371,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:372,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:373,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:374,180:203,181:202},{21:[1,377],163:[1,376],168:[1,375]},o($VV1,[2,79]),o($VV1,[2,80]),o($VV1,[2,81]),{21:[1,378]},{21:[1,379]},o($VV1,[2,82]),o($VV1,[2,83]),o($VV1,[2,84]),o($VV1,[2,85]),o($VV1,[2,86]),o($VV1,[2,87]),o($VV1,[2,88]),o($VV1,[2,89]),o($VV1,[2,90]),o($VV1,[2,91]),o($VV1,[2,92]),o($VV1,[2,93]),o($VV1,[2,94]),o($VV1,[2,95]),o($VV1,[2,96]),o($VV1,[2,97]),o($VV1,[2,98]),o($VV1,[2,99]),{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:380,180:203,181:202},{21:$VW1,23:$VX1,163:$VY1,168:$VZ1,177:381,180:203,181:202},o($VV1,[2,100]),{19:$V42,21:$VW1,23:$VX1,69:$V52,98:382,163:$VY1,168:$VZ1,177:241,180:203,181:202},o($VV1,[2,102]),{19:$V42,21:$VW1,23:$VX1,69:$V52,98:383,163:$VY1,168:$VZ1,177:241,180:203,181:202},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:384,163:$VY1,168:$VZ1,177:241,180:203,181:202},{21:$V62,23:$V72,26:385,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:386,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:387,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:388,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:389,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:390,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:391,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:392,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:393,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:394,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:395,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:396,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:397,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:398,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:399,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:400,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:401,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:402,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:403,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:404,33:$V82,36:$V92,54:$Va2,56:$Vb2},{21:$V62,23:$V72,26:405,33:$V82,36:$V92,54:$Va2,56:$Vb2},o($VQ2,[2,33],{37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2}),o($VN2,[2,47]),{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2,57:[1,406]},{19:$V42,21:$VW1,23:$VX1,69:$V52,98:407,163:$VY1,168:$VZ1,177:241,180:203,181:202},o($VV1,[2,108]),o($VV1,[2,131]),o($VV1,[2,132]),{72:408,127:$Vc2,159:$Vd2,160:$Ve2,161:$Vf2,162:$Vg2,163:$Vh2,164:$Vi2,165:$Vj2,166:$Vk2,168:$Vl2,171:$Vm2},o($VV1,[2,133]),{22:[1,409]},{22:[1,410]},o($Vn2,[2,70]),o($Vn2,[2,71]),o($Vq2,[2,215]),o($Vq2,[2,216]),o($Vq2,[2,221]),o($Vq2,[2,222]),o($Vq2,[2,223]),o($Vq2,[2,224]),{57:[2,193]},{57:[2,194]},{35:$Vo2,36:$Vp2,57:[2,197]},{22:[1,411],35:$Vo2,36:$Vp2},{35:$Vo2,36:$Vp2,57:[2,198]},{22:[1,412],35:$Vo2,36:$Vp2},{35:$Vo2,36:$Vp2,57:[2,199]},{22:[1,413],35:$Vo2,36:$Vp2},{22:[1,414],35:$Vo2,36:$Vp2},{57:[2,205]},{57:[2,206]},{57:[2,207]},{57:[2,231]},{57:[2,232]},o($Vs2,[2,211],{35:$Vo2,36:$Vp2}),o($Vs2,[2,212],{35:$Vo2,36:$Vp2}),{57:[1,415]},{57:[1,416]},{57:[1,417],70:[1,418]},o($VQ2,[2,27],{37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2}),o($VQ2,[2,28],{37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2}),o($VN2,[2,29]),o($VN2,[2,30]),o($VN2,[2,31]),o($VN2,[2,32]),o($VR2,[2,34],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2}),o($VR2,[2,35],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,36],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,37],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,45,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,38],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,44:$VC2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2}),o($VS2,[2,39],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2}),o($VS2,[2,40],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2}),o($VS2,[2,41],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2}),o($VS2,[2,42],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2}),o($VT2,[2,43],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,46:$VE2,47:$VF2,48:$VG2,49:$VH2}),o($VT2,[2,44],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,46:$VE2,47:$VF2,48:$VG2,49:$VH2}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,52,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,45],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,53,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,46],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2}),{15:[1,419],35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2},o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,55,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,26],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2}),o($VN2,[2,49]),{57:[1,420],70:[1,421]},o($Vs2,[2,74]),o($VI,[2,15]),o($VI,[2,16]),{57:[2,200]},{57:[2,201]},{57:[2,202]},{57:[2,203]},o($VV1,[2,101]),o($VV1,[2,103]),o($VV1,[2,104]),{19:$V42,21:$VW1,23:$VX1,69:$V52,98:422,163:$VY1,168:$VZ1,177:241,180:203,181:202},{21:$V62,23:$V72,26:423,33:$V82,36:$V92,54:$Va2,56:$Vb2},o($VV1,[2,106]),{19:$V42,21:$VW1,23:$VX1,69:$V52,98:424,163:$VY1,168:$VZ1,177:241,180:203,181:202},{57:[1,425]},o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,57,63,64,65,69,70,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,178,179],[2,48],{35:$Vt2,36:$Vu2,37:$Vv2,38:$Vw2,39:$Vx2,40:$Vy2,41:$Vz2,42:$VA2,43:$VB2,44:$VC2,45:$VD2,46:$VE2,47:$VF2,48:$VG2,49:$VH2,50:$VI2,51:$VJ2,52:$VK2,53:$VL2,55:$VM2}),{57:[1,426]},o($VV1,[2,105]),o($VV1,[2,107])],
defaultActions: {60:[2,1],118:[2,147],119:[2,148],120:[2,149],121:[2,150],122:[2,135],123:[2,136],124:[2,137],125:[2,138],126:[2,139],127:[2,140],128:[2,151],129:[2,152],130:[2,153],131:[2,154],132:[2,155],133:[2,156],134:[2,141],135:[2,142],136:[2,143],137:[2,144],138:[2,145],139:[2,146],141:[2,20],142:[2,21],286:[2,195],287:[2,196],366:[2,193],367:[2,194],375:[2,205],376:[2,206],377:[2,207],378:[2,231],379:[2,232],411:[2,200],412:[2,201],413:[2,202],414:[2,203]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const lodash = require('lodash');
const JMP_FLAGS = {JMP: 0, JMPZ: 0,  JMPC: 0, JMPN: 0, return: 0, call: 0 };


function normalizeArrayIndex(st, useAddrRelProp = false) {
    if (typeof st.ind !== typeof st.indRR) {
        st.ind = st.ind ?? 0;
        st.indRR = st.indRR ?? 0;
    }
    delete st._fk;
    if (useAddrRelProp !== false && typeof st.useAddrRel !== 'undefined') {
        if (st.useAddrRel) st[useAddrRelProp] = 1;
        delete st.useAddrRel;
    }
}

function applyAddrRel(prefix, data) {
    let _jmp = {...data};
    if (_jmp.useAddrRel) {
        _jmp.ind = _jmp.ind ?? 0;
        _jmp.indRR = _jmp.indRR ?? 0;
        _jmp[`${prefix}UseAddrRel`] = 1;
        delete _jmp.useAddrRel;
    }
    _jmp[`${prefix}Addr`] = _jmp.offset ?? 0;
    delete _jmp.offset;
    _jmp[`${prefix}AddrLabel`] = _jmp.offsetLabel ?? '';
    delete _jmp.offsetLabel;
    return _jmp;
}

function applyCondConst(jmp, cond) {
    return { condConst: { type: '@final', value:  {type: '-' , values: [{type: 'CONSTL' , value: jmp.condConst}, cond]}}};
}
function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 33; 
break;
case 3: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 21; 
break;
case 4: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 5: yy_.yytext = yy_.yytext.length == 2 ? "" : yy_.yytext.slice(3, -1); return 64; 
break;
case 6: yy_.yytext = yy_.yytext.length == 2 ? "" : yy_.yytext.slice(6, -1); return 65; 
break;
case 7: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 63; 
break;
case 8: return "LF";
break;
case 9: /* console.log("Empty spaces"); */ 
break;
case 10: return 159; 
break;
case 11: return 160; 
break;
case 12: return 161; 
break;
case 13: return 162; 
break;
case 14: return 163; 
break;
case 15: return 127; 
break;
case 16: return 164; 
break;
case 17: return 30; 
break;
case 18: return 165; 
break;
case 19: return 166; 
break;
case 20: return 167; 
break;
case 21: return 169; 
break;
case 22: return 168; 
break;
case 23: return 170; 
break;
case 24: return 172; 
break;
case 25: return 171; 
break;
case 26: return 173; 
break;
case 27: return 76 
break;
case 28: return 74 
break;
case 29: return 77 
break;
case 30: return 83 
break;
case 31: return 84 
break;
case 32: yy_.yytext = yy_.yytext.slice(7); return 80 
break;
case 33: yy_.yytext = yy_.yytext.slice(5); return 82 
break;
case 34: return 78 
break;
case 35: return 81 
break;
case 36: return 89 
break;
case 37: return 90 
break;
case 38: yy_.yytext = yy_.yytext.slice(7); return 86 
break;
case 39: yy_.yytext = yy_.yytext.slice(5); return 88 
break;
case 40: return 85 
break;
case 41: return 87 
break;
case 42: return 95 
break;
case 43: return 96 
break;
case 44: yy_.yytext = yy_.yytext.slice(7); return 92 
break;
case 45: yy_.yytext = yy_.yytext.slice(5); return 94 
break;
case 46: return 91 
break;
case 47: return 93 
break;
case 48: return 131 
break;
case 49: return 132 
break;
case 50: return 143 
break;
case 51: return 142 
break;
case 52: return 130 
break;
case 53: return 136 
break;
case 54: return 146 
break;
case 55: return 137 
break;
case 56: return 138 
break;
case 57: return 147 
break;
case 58: return 148 
break;
case 59: return 97 
break;
case 60: return 135 
break;
case 61: return 133 
break;
case 62: return 144 
break;
case 63: return 145 
break;
case 64: return 134 
break;
case 65: return 139 
break;
case 66: return 149 
break;
case 67: return 140 
break;
case 68: return 141 
break;
case 69: return 150 
break;
case 70: return 151 
break;
case 71: return 103 
break;
case 72: return 104 
break;
case 73: return 105 
break;
case 74: return 106 
break;
case 75: return 107 
break;
case 76: return 108 
break;
case 77: return 109 
break;
case 78: return 110 
break;
case 79: return 111 
break;
case 80: return 112 
break;
case 81: return 113 
break;
case 82: return 114 
break;
case 83: return 115 
break;
case 84: return 116 
break;
case 85: return 117 
break;
case 86: return 118 
break;
case 87: return 119 
break;
case 88: return 120 
break;
case 89: return 121 
break;
case 90: return 122 
break;
case 91: return 123 
break;
case 92: return 152 
break;
case 93: return 153 
break;
case 94: return 154 
break;
case 95: return 155 
break;
case 96: return 156 
break;
case 97: return 157 
break;
case 98: return 158 
break;
case 99: return 124 
break;
case 100: return 125 
break;
case 101: return 176 
break;
case 102: return 178 
break;
case 103: return 179 
break;
case 104: return 31 
break;
case 105: return 17 
break;
case 106: return 29 
break;
case 107: return 30 
break;
case 108: return 24 
break;
case 109: return 27 
break;
case 110: return 126 
break;
case 111: return 128 
break;
case 112: return 129 
break;
case 113: yy_.yytext = yy_.yytext.slice(1,-1); return 32; 
break;
case 114: yy_.yytext = yy_.yytext.slice(0, -1); return 8; 
break;
case 115: return 19; 
break;
case 116: yy_.yytext = yy_.yytext.slice(1); return 23; 
break;
case 117: yy_.yytext = yy_.yytext.slice(1); return 69; 
break;
case 118: return 15; 
break;
case 119: return 70
break;
case 120: return 56
break;
case 121: return 57
break;
case 122: return 174
break;
case 123: return 175
break;
case 124: return 35
break;
case 125: return 36
break;
case 126: return 40
break;
case 127: return 38
break;
case 128: return 37
break;
case 129: return 39
break;
case 130: return 59 
break;
case 131: return 41 
break;
case 132: return 42 
break;
case 133: return 45 
break;
case 134: return 53 
break;
case 135: return 52 
break;
case 136: return 44 
break;
case 137: return 43 
break;
case 138: return 50 
break;
case 139: return 51 
break;
case 140: return 48 
break;
case 141: return 49 
break;
case 142: return 47 
break;
case 143: return 46 
break;
case 144: return 25 
break;
case 145: return 54 
break;
case 146: return 34 
break;
case 147: return 55 
break;
case 148: return 20 
break;
case 149: return 22 
break;
case 150: return 5; 
break;
case 151: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$0(\{[^\}]*\})?))/,/^(?:(\$BYTE(\{[^\}]*\})?))/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:HASHPOS\b)/,/^(?:RID\b)/,/^(?:F_MLOAD\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:F_HASHK((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:HASHK((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:F_HASHK\b)/,/^(?:HASHK\b)/,/^(?:HASHSLEN\b)/,/^(?:HASHSDIGEST\b)/,/^(?:F_HASHS((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:HASHS((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:F_HASHS\b)/,/^(?:HASHS\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:F_HASHP((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:HASHP((1[0-9])|(2[0-9])|(3[0-2])|[1-9]))/,/^(?:F_HASHP\b)/,/^(?:HASHP\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:JMP_EQ\b)/,/^(?:JMP_NE\b)/,/^(?:JMP_LT\b)/,/^(?:JMP_LE\b)/,/^(?:JMP_GT\b)/,/^(?:JMP_GE\b)/,/^(?:JMP\b)/,/^(?:CALL_C\b)/,/^(?:CALL_Z\b)/,/^(?:CALL_NC\b)/,/^(?:CALL_NZ\b)/,/^(?:CALL_N\b)/,/^(?:CALL_EQ\b)/,/^(?:CALL_NE\b)/,/^(?:CALL_LT\b)/,/^(?:CALL_LE\b)/,/^(?:CALL_GT\b)/,/^(?:CALL_GE\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:ARITH_BN254_MULFP2\b)/,/^(?:ARITH_BN254_ADDFP2\b)/,/^(?:ARITH_BN254_SUBFP2\b)/,/^(?:ARITH_MOD\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:SLT\b)/,/^(?:EQ\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:LT4\b)/,/^(?:CNT_ARITH\b)/,/^(?:CNT_BINARY\b)/,/^(?:CNT_KECCAK_F\b)/,/^(?:CNT_SHA256_F\b)/,/^(?:CNT_MEM_ALIGN\b)/,/^(?:CNT_PADDING_PG\b)/,/^(?:CNT_POSEIDON_G\b)/,/^(?:MEM_ALIGN_RD\b)/,/^(?:MEM_ALIGN_WR\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:SAVE\b)/,/^(?:RESTORE\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*:)/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}