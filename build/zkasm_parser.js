/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,28],$V5=[1,16],$V6=[1,30],$V7=[1,17],$V8=[1,20],$V9=[1,38],$Va=[1,18],$Vb=[1,19],$Vc=[1,29],$Vd=[1,22],$Ve=[1,25],$Vf=[1,31],$Vg=[1,42],$Vh=[1,36],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,37],$Vu=[1,39],$Vv=[1,40],$Vw=[1,41],$Vx=[1,43],$Vy=[1,44],$Vz=[1,45],$VA=[1,46],$VB=[1,47],$VC=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,38,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[1,65],$VI=[1,66],$VJ=[1,67],$VK=[1,68],$VL=[1,69],$VM=[1,70],$VN=[1,71],$VO=[1,74],$VP=[1,75],$VQ=[1,76],$VR=[1,77],$VS=[1,78],$VT=[1,79],$VU=[1,80],$VV=[1,81],$VW=[1,82],$VX=[1,83],$VY=[1,84],$VZ=[1,85],$V_=[1,86],$V$=[1,87],$V01=[1,88],$V11=[1,89],$V21=[1,90],$V31=[1,91],$V41=[1,92],$V51=[1,93],$V61=[1,94],$V71=[1,95],$V81=[1,96],$V91=[1,97],$Va1=[1,98],$Vb1=[1,99],$Vc1=[1,100],$Vd1=[1,101],$Ve1=[1,102],$Vf1=[14,16],$Vg1=[14,16,37,38,61],$Vh1=[1,115],$Vi1=[14,16,37,38,39,61],$Vj1=[14,16,37,38,39,61,69],$Vk1=[1,119],$Vl1=[14,69],$Vm1=[1,151],$Vn1=[1,147],$Vo1=[1,148],$Vp1=[1,149],$Vq1=[1,150],$Vr1=[1,154],$Vs1=[1,155],$Vt1=[1,177],$Vu1=[1,179],$Vv1=[1,178],$Vw1=[1,180],$Vx1=[1,181],$Vy1=[1,182],$Vz1=[14,16,69],$VA1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VB1=[1,220],$VC1=[1,221],$VD1=[1,222],$VE1=[1,223],$VF1=[1,224],$VG1=[1,225],$VH1=[1,226],$VI1=[1,227],$VJ1=[1,228],$VK1=[1,229],$VL1=[1,230],$VM1=[1,231],$VN1=[1,232],$VO1=[1,233],$VP1=[1,234],$VQ1=[1,235],$VR1=[1,236],$VS1=[1,237],$VT1=[1,238],$VU1=[1,239],$VV1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VW1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VX1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,43,44,45,46,47,48,49,50,51,52,53,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VY1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,45,46,47,48,49,50,51,52,53,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$VZ1=[5,14,16,18,19,22,24,25,28,29,31,32,34,35,45,46,47,52,53,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"constDef":10,"include":11,"namespace":12,"command":13,"LF":14,"assignment":15,":":16,"opList":17,"IDENTIFIER":18,"VAR":19,"scope":20,"[":21,"NUMBER":22,"]":23,"CONST":24,"CONSTID":25,"=":26,"nexpr":27,"CONSTL":28,"COMMAND":29,"GLOBAL":30,"CTX":31,"INCLUDE":32,"STRING":33,"NAMESPACE":34,"NUMBERL":35,"??":36,"+":37,"-":38,"*":39,"**":40,"%":41,"/":42,"<<":43,">>":44,"|":45,"&":46,"^":47,"<":48,">":49,"<=":50,">=":51,"==":52,"!=":53,"&&":54,"||":55,"!":56,"?":57,"(":58,")":59,"inRegsSum":60,"=>":61,"regsList":62,"inRegP":63,"inReg":64,"TAG":65,"reg":66,"counter":67,"REFERENCE":68,",":69,"op":70,"MLOAD":71,"addr":72,"MSTORE":73,"HASHK":74,"hashId":75,"HASHK1":76,"HASHKLEN":77,"HASHKDIGEST":78,"HASHP":79,"HASHP1":80,"HASHPLEN":81,"HASHPDIGEST":82,"JMP":83,"jmpCond":84,"jmpNotCond":85,"RR":86,"E":87,"CALL":88,"RETURN":89,"ASSERT":90,"ECRECOVER":91,"SLOAD":92,"SSTORE":93,"ARITH":94,"ARITH_ECADD_DIFFERENT":95,"ARITH_ECADD_SAME":96,"SHL":97,"SHR":98,"ADD":99,"SUB":100,"LT":101,"SLT":102,"EQ":103,"AND":104,"OR":105,"XOR":106,"MEM_ALIGN_RD":107,"MEM_ALIGN_WR":108,"MEM_ALIGN_WR8":109,"INST_MAP_ROM":110,"REPEAT":111,"RCX":112,"JMPN":113,"JMPC":114,"JMPZ":115,"JMPNC":116,"JMPNZ":117,"CNT_ARITH":118,"CNT_BINARY":119,"CNT_KECCAK_F":120,"CNT_MEM_ALIGN":121,"CNT_PADDING_PG":122,"CNT_POSEIDON_G":123,"A":124,"B":125,"C":126,"D":127,"SR":128,"SP":129,"PC":130,"GAS":131,"zkPC":132,"STEP":133,"MAXMEM":134,"HASHPOS":135,"ROTL_C":136,"++":137,"--":138,"SYS":139,"MEM":140,"STACK":141,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"LF",16:":",18:"IDENTIFIER",19:"VAR",21:"[",22:"NUMBER",23:"]",24:"CONST",25:"CONSTID",26:"=",28:"CONSTL",29:"COMMAND",30:"GLOBAL",31:"CTX",32:"INCLUDE",33:"STRING",34:"NAMESPACE",35:"NUMBERL",36:"??",37:"+",38:"-",39:"*",40:"**",41:"%",42:"/",43:"<<",44:">>",45:"|",46:"&",47:"^",48:"<",49:">",50:"<=",51:">=",52:"==",53:"!=",54:"&&",55:"||",56:"!",57:"?",58:"(",59:")",61:"=>",65:"TAG",68:"REFERENCE",69:",",71:"MLOAD",73:"MSTORE",74:"HASHK",76:"HASHK1",77:"HASHKLEN",78:"HASHKDIGEST",79:"HASHP",80:"HASHP1",81:"HASHPLEN",82:"HASHPDIGEST",83:"JMP",86:"RR",87:"E",88:"CALL",89:"RETURN",90:"ASSERT",91:"ECRECOVER",92:"SLOAD",93:"SSTORE",94:"ARITH",95:"ARITH_ECADD_DIFFERENT",96:"ARITH_ECADD_SAME",97:"SHL",98:"SHR",99:"ADD",100:"SUB",101:"LT",102:"SLT",103:"EQ",104:"AND",105:"OR",106:"XOR",107:"MEM_ALIGN_RD",108:"MEM_ALIGN_WR",109:"MEM_ALIGN_WR8",110:"INST_MAP_ROM",111:"REPEAT",112:"RCX",113:"JMPN",114:"JMPC",115:"JMPZ",116:"JMPNC",117:"JMPNZ",118:"CNT_ARITH",119:"CNT_BINARY",120:"CNT_KECCAK_F",121:"CNT_MEM_ALIGN",122:"CNT_PADDING_PG",123:"CNT_POSEIDON_G",124:"A",125:"B",126:"C",127:"D",128:"SR",129:"SP",130:"PC",131:"GAS",132:"zkPC",133:"STEP",134:"MAXMEM",135:"HASHPOS",136:"ROTL_C",137:"++",138:"--",139:"SYS",140:"MEM",141:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[9,3],[9,6],[10,4],[10,4],[13,1],[20,1],[20,1],[11,2],[12,2],[27,1],[27,1],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,5],[27,3],[15,3],[15,1],[60,3],[60,3],[60,2],[60,1],[63,3],[63,1],[64,1],[64,1],[64,1],[64,3],[64,1],[64,1],[64,1],[64,1],[62,3],[62,1],[17,3],[17,1],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,6],[70,4],[70,6],[70,4],[70,4],[70,6],[70,6],[70,4],[70,4],[70,6],[70,6],[70,6],[70,6],[70,8],[70,8],[70,4],[70,6],[70,6],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,4],[84,1],[84,1],[84,1],[85,1],[85,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[72,1],[72,3],[72,3],[72,2],[72,2],[72,5],[72,5],[72,3],[72,5],[72,5],[72,3],[72,5],[72,5],[72,3],[72,1],[72,3],[72,3],[75,1],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10:

            this.$ = $$[$0];
        
break;
case 11:

            this.$ = null;
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 13:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 14:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 15:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 16:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 17:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 18:

            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 19:

            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 20:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 23:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 24:

            this.$ = {type: "namespace", namespace: $$[$0]}
        
break;
case 25: case 26:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 27: case 66:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 28:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 29: case 30: case 31: case 32: case 33: case 34: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 35: case 49:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 50:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 51:

            this.$ = $$[$0-1]
        
break;
case 52:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 53:

            this.$ = {in: $$[$0], out: []}
        
break;
case 54:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 55:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 56:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 57: case 59:

            this.$ = $$[$0]
        
break;
case 58:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 60:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 61:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 62:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 63:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 64:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 65:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 67:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 68:

            $$[$0-2].push($$[$0])
        
break;
case 69: case 71:

            this.$ = [$$[$0]]
        
break;
case 70:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 72:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 0;
        
break;
case 73:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 1;
        
break;
case 74:

            this.$ = $$[$0-1];
            this.$.hashK = 1;
        
break;
case 75:

            this.$ = $$[$0-1];
            this.$.hashK1 = 1;
        
break;
case 76:

            this.$ = $$[$0-1];
            this.$.hashKLen = 1;
        
break;
case 77:

            this.$ = $$[$0-1];
            this.$.hashKDigest = 1;
        
break;
case 78:

            this.$ = $$[$0-1];
            this.$.hashP = 1;
        
break;
case 79:

            this.$ = $$[$0-1];
            this.$.hashP1 = 1;
        
break;
case 80:

            this.$ = $$[$0-1];
            this.$.hashPLen = 1;
        
break;
case 81:

            this.$ = $$[$0-1];
            this.$.hashPDigest = 1;
        
break;
case 82:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1] }
        
break;
case 83:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1], useElseAddr: 1, elseAddr: '###__NEXT__###' }
        
break;
case 84:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-3], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 85:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: '###__NEXT__###', useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 86:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr:  $$[$0-1], useElseAddr: 1, elseAddr: $$[$0-3] }
        
break;
case 87:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0 }
        
break;
case 88:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0 }
        
break;
case 89:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3] }
        
break;
case 90:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3] }
        
break;
case 91:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: '###__NEXT__###' }
        
break;
case 92:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: '###__NEXT__###' }
        
break;
case 93:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3], useElseAddr: 1, elseAddr: '###__NEXT__###' }
        
break;
case 94:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3], useElseAddr: 1, elseAddr: '###__NEXT__###' }
        
break;
case 95:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 96:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 97:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 98:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 99:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, useJmpAddr:1, jmpAddr: $$[$0-1], call: 1}
        
break;
case 100:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 0, indRR: 1, return: 0, call: 1}
        
break;
case 101:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 1, indRR: 0, return: 0, call: 1}
        
break;
case 102:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  call: 0, return: 1}
        
break;
case 103:

            this.$ = {assert: 1}
        
break;
case 104:

            this.$ = {ecRecover: 1}
        
break;
case 105:

            this.$ = {sRD: 1}
        
break;
case 106:

            this.$ = {sWR: 1}
        
break;
case 107:

            this.$ = { arithEq0: 1, arithEq1: 0, arithEq2: 0}
        
break;
case 108:

            this.$ = { arithEq0: 0, arithEq1: 1, arithEq2: 0}
        
break;
case 109:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 1}
        
break;
case 110:

            this.$ = { shl: 1}
        
break;
case 111:

            this.$ = { shr: 1}
        
break;
case 112:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 113:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 114:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 115:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 116:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 117:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 118:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 119:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 120:

            this.$ = { memAlignRD: 1, memAlignWR: 0, memAlignWR8: 0}
        
break;
case 121:

            this.$ = { memAlignRD: 0, memAlignWR: 1, memAlignWR8: 0}
        
break;
case 122:

            this.$ = { memAlignRD: 0, memAlignWR: 0, memAlignWR8: 1}
        
break;
case 123:

            this.$ = { instMapRom: 1 }
        
break;
case 124:

            this.$ = { repeat: 1 }
        
break;
case 128:
 this.$ = 'JMPC' 
break;
case 129:
 this.$ = 'JMPZ' 
break;
case 130:
 this.$ = 'cntArith' 
break;
case 131:
 this.$ = 'cntBinary' 
break;
case 132:
 this.$ = 'cntKeccakF' 
break;
case 133:
 this.$ = 'cntMemAlign' 
break;
case 134:
 this.$ = 'cntPaddingPG' 
break;
case 135:
 this.$ = 'cntPoseidonG' 
break;
case 153:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 154:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
break;
case 155:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
break;
case 156:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 1, offset: 0, useCTX: 1}
break;
case 157:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: -1, offset: 0, useCTX: 1}
break;
case 158:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: $$[$0]}
        
break;
case 159:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: -$$[$0]}
        
break;
case 160:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: 0}
        
break;
case 161:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 162:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 163:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 164:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 165:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 166:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 167:

            this.$ = { offset: $$[$0] }
        
break;
case 168:

            this.$ = { offset: $$[$0-2], ind: 0, indRR: 1 }
        
break;
case 169:

            this.$ = { offset: $$[$0-2], ind: 1, indRR: 0 }
        
break;
case 170:

            this.$ = {ind: 0, indRR: 0, offset:$$[$0]}
        
break;
case 171:

            this.$ = {ind: 1, indRR: 0, offset:0}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:12,16:$V1,18:$V2,19:$V3,22:$V4,24:$V5,25:$V6,28:$V7,29:$V8,31:$V9,32:$Va,34:$Vb,35:$Vc,38:$Vd,60:21,63:23,64:24,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},{1:[3]},{5:[1,55],6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:12,16:$V1,18:$V2,19:$V3,22:$V4,24:$V5,25:$V6,28:$V7,29:$V8,31:$V9,32:$Va,34:$Vb,35:$Vc,38:$Vd,60:21,63:23,64:24,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},o($VC,[2,3]),o($VC,[2,4]),o($VC,[2,5]),o($VC,[2,6]),o($VC,[2,7]),o($VC,[2,8]),o($VC,[2,9]),o($VC,[2,10]),o($VC,[2,11]),{14:[1,58],16:[1,57]},{17:59,70:60,71:$VD,73:$VE,74:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:72,85:73,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11,104:$V21,105:$V31,106:$V41,107:$V51,108:$V61,109:$V71,110:$V81,111:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1,117:$Ve1},{16:[1,103]},{20:104,30:[1,105],31:[1,106]},{25:[1,107]},{25:[1,108]},{33:[1,109]},{18:[1,110]},o($VC,[2,20]),o($Vf1,[2,53],{37:[1,112],38:[1,113],61:[1,111]}),{22:$V4,25:$V6,31:$V9,35:$Vc,63:114,64:24,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},o($Vg1,[2,57],{39:$Vh1}),o($Vi1,[2,59]),o($Vi1,[2,60]),o($Vi1,[2,61]),o($Vi1,[2,62]),o($Vi1,[2,64],{40:[1,116]}),o($Vi1,[2,65]),o($Vi1,[2,66]),o($Vi1,[2,67]),o($Vj1,[2,136]),o($Vj1,[2,137]),o($Vj1,[2,138]),o($Vj1,[2,139]),o($Vj1,[2,140]),o($Vj1,[2,141]),o($Vj1,[2,142]),o($Vj1,[2,143]),o($Vj1,[2,144]),o($Vj1,[2,145]),o($Vj1,[2,146]),o($Vj1,[2,147]),o($Vj1,[2,148]),o($Vj1,[2,149]),o($Vj1,[2,150]),o($Vj1,[2,151]),o($Vj1,[2,152]),o($Vi1,[2,130]),o($Vi1,[2,131]),o($Vi1,[2,132]),o($Vi1,[2,133]),o($Vi1,[2,134]),o($Vi1,[2,135]),{1:[2,1]},o($VC,[2,2]),{17:117,70:60,71:$VD,73:$VE,74:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:72,85:73,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11,104:$V21,105:$V31,106:$V41,107:$V51,108:$V61,109:$V71,110:$V81,111:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1,117:$Ve1},o($VC,[2,13]),{14:[1,118],69:$Vk1},o($Vl1,[2,71]),{58:[1,120]},{58:[1,121]},{58:[1,122]},{58:[1,123]},{58:[1,124]},{58:[1,125]},{58:[1,126]},{58:[1,127]},{58:[1,128]},{58:[1,129]},{58:[1,130]},{58:[1,131]},{58:[1,132]},{58:[1,133]},o($Vl1,[2,102]),o($Vl1,[2,103]),o($Vl1,[2,104]),o($Vl1,[2,105]),o($Vl1,[2,106]),o($Vl1,[2,107]),o($Vl1,[2,108]),o($Vl1,[2,109]),o($Vl1,[2,110]),o($Vl1,[2,111]),o($Vl1,[2,112]),o($Vl1,[2,113]),o($Vl1,[2,114]),o($Vl1,[2,115]),o($Vl1,[2,116]),o($Vl1,[2,117]),o($Vl1,[2,118]),o($Vl1,[2,119]),o($Vl1,[2,120]),o($Vl1,[2,121]),o($Vl1,[2,122]),o($Vl1,[2,123]),{58:[1,134]},{58:[2,125]},{58:[2,126]},{58:[2,127]},{58:[2,128]},{58:[2,129]},o($VC,[2,15]),{18:[1,135]},{18:[2,21]},{18:[2,22]},{26:[1,136]},{26:[1,137]},o($VC,[2,23]),o($VC,[2,24]),{31:$V9,62:138,66:139,86:$Vg,87:$Vh,112:$Vi,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},{22:$V4,25:$V6,31:$V9,35:$Vc,63:140,64:24,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},{22:$V4,25:$V6,31:$V9,35:$Vc,63:141,64:24,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},o($Vg1,[2,56],{39:$Vh1}),{22:$V4,25:$V6,31:$V9,35:$Vc,64:142,65:$Ve,66:26,67:27,68:$Vf,86:$Vg,87:$Vh,112:$Vi,118:$Vj,119:$Vk,120:$Vl,121:$Vm,122:$Vn,123:$Vo,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},{22:[1,143]},{14:[1,144],69:$Vk1},o($VC,[2,14]),{70:145,71:$VD,73:$VE,74:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:72,85:73,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11,104:$V21,105:$V31,106:$V41,107:$V51,108:$V61,109:$V71,110:$V81,111:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1,117:$Ve1},{18:$Vm1,72:146,129:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1},{18:$Vm1,72:152,129:$Vn1,139:$Vo1,140:$Vp1,141:$Vq1},{22:$Vr1,75:153,87:$Vs1},{22:$Vr1,75:156,87:$Vs1},{22:$Vr1,75:157,87:$Vs1},{22:$Vr1,75:158,87:$Vs1},{22:$Vr1,75:159,87:$Vs1},{22:$Vr1,75:160,87:$Vs1},{22:$Vr1,75:161,87:$Vs1},{22:$Vr1,75:162,87:$Vs1},{18:[1,163],68:[1,166],86:[1,164],87:[1,165]},{18:[1,167],68:[1,170],86:[1,168],87:[1,169]},{18:[1,171]},{18:[1,172],68:[1,173]},{112:[1,174]},o($VC,[2,16],{21:[1,175]}),{22:$Vt1,25:$Vu1,27:176,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:183,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},o($Vf1,[2,52],{69:[1,184]}),o($Vz1,[2,69]),o($Vg1,[2,54],{39:$Vh1}),o($Vg1,[2,55],{39:$Vh1}),o($Vi1,[2,58]),o($Vi1,[2,63]),o($VC,[2,12]),o($Vl1,[2,70]),{59:[1,185]},{37:[1,186],38:[1,187],59:[2,153],137:[1,188],138:[1,189]},{16:[1,190]},{16:[1,191]},{16:[1,192]},{37:[1,193],59:[2,167]},{59:[1,194]},{59:[1,195]},{59:[2,170]},{59:[2,171]},{59:[1,196]},{59:[1,197]},{59:[1,198]},{59:[1,199]},{59:[1,200]},{59:[1,201]},{59:[1,202]},{59:[1,203]},{59:[1,204]},{59:[1,205]},{37:[1,206]},{59:[1,207],69:[1,208]},{59:[1,209],69:[1,210]},{59:[1,211],69:[1,212]},{37:[1,213]},{59:[1,214],69:[1,215]},{59:[1,216]},{37:[1,217]},{59:[1,218]},{22:[1,219]},o($VA1,[2,18],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1,57:$VU1}),o($VV1,[2,25]),o($VV1,[2,26]),o($VV1,[2,27],{36:[1,240]}),{22:$Vt1,25:$Vu1,27:241,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:242,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:243,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},o($VA1,[2,19],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1,57:$VU1}),{31:$V9,66:244,86:$Vg,87:$Vh,112:$Vi,124:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB},o($Vl1,[2,72]),{22:[1,245]},{22:[1,246]},{59:[2,156]},{59:[2,157]},{87:[1,247]},{87:[1,248]},{87:[1,249]},{86:[1,250],87:[1,251]},o($Vl1,[2,73]),o($Vl1,[2,74]),o($Vl1,[2,75]),o($Vl1,[2,76]),o($Vl1,[2,77]),o($Vl1,[2,78]),o($Vl1,[2,79]),o($Vl1,[2,80]),o($Vl1,[2,81]),o($Vl1,[2,82]),o($Vl1,[2,87]),o($Vl1,[2,88]),{86:[1,252],87:[1,253]},o($Vl1,[2,83]),{18:[1,254]},o($Vl1,[2,91]),{18:[1,255]},o($Vl1,[2,92]),{18:[1,256]},{86:[1,257],87:[1,258]},o($Vl1,[2,85]),{18:[1,259]},o($Vl1,[2,99]),{86:[1,260],87:[1,261]},o($Vl1,[2,124]),{23:[1,262]},{22:$Vt1,25:$Vu1,27:263,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:264,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:265,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:266,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:267,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:268,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:269,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:270,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:271,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:272,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:273,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:274,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:275,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:276,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:277,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:278,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:279,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:280,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:281,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:282,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{22:$Vt1,25:$Vu1,27:283,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},o($VW1,[2,35],{39:$VD1,40:$VE1,41:$VF1,42:$VG1}),o($VV1,[2,49]),{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1,57:$VU1,59:[1,284]},o($Vz1,[2,68]),{59:[2,154]},{59:[2,155]},{37:[1,285],38:[1,286],59:[2,160]},{37:[1,287],38:[1,288],59:[2,163]},{37:[1,289],38:[1,290],59:[2,166]},{59:[2,168]},{59:[2,169]},{59:[1,291]},{59:[1,292]},{59:[1,293]},{59:[1,294]},{59:[1,295]},{59:[1,296],69:[1,297]},{59:[1,298],69:[1,299]},{59:[1,300]},{59:[1,301]},{59:[1,302]},o($VC,[2,17]),o($VW1,[2,29],{39:$VD1,40:$VE1,41:$VF1,42:$VG1}),o($VW1,[2,30],{39:$VD1,40:$VE1,41:$VF1,42:$VG1}),o($VV1,[2,31]),o($VV1,[2,32]),o($VV1,[2,33]),o($VV1,[2,34]),o($VX1,[2,36],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1}),o($VX1,[2,37],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1}),o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,45,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,38],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1}),o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,45,46,47,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,39],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1}),o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,45,47,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,40],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,46:$VK1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1}),o($VY1,[2,41],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1}),o($VY1,[2,42],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1}),o($VY1,[2,43],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1}),o($VY1,[2,44],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1}),o($VZ1,[2,45],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,48:$VM1,49:$VN1,50:$VO1,51:$VP1}),o($VZ1,[2,46],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,48:$VM1,49:$VN1,50:$VO1,51:$VP1}),o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,54,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,47],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1}),o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,55,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,48],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1}),{16:[1,303],37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1,57:$VU1},o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,57,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,28],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1}),o($VV1,[2,51]),{22:[1,304]},{22:[1,305]},{22:[1,306]},{22:[1,307]},{22:[1,308]},{22:[1,309]},o($Vl1,[2,89]),o($Vl1,[2,90]),o($Vl1,[2,84]),o($Vl1,[2,95]),o($Vl1,[2,96]),o($Vl1,[2,93]),{18:[1,310]},o($Vl1,[2,94]),{18:[1,311]},o($Vl1,[2,86]),o($Vl1,[2,100]),o($Vl1,[2,101]),{22:$Vt1,25:$Vu1,27:312,35:$Vv1,38:$Vw1,56:$Vx1,58:$Vy1},{59:[2,158]},{59:[2,159]},{59:[2,161]},{59:[2,162]},{59:[2,164]},{59:[2,165]},{59:[1,313]},{59:[1,314]},o([5,14,16,18,19,22,24,25,28,29,31,32,34,35,59,65,68,86,87,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[2,50],{37:$VB1,38:$VC1,39:$VD1,40:$VE1,41:$VF1,42:$VG1,43:$VH1,44:$VI1,45:$VJ1,46:$VK1,47:$VL1,48:$VM1,49:$VN1,50:$VO1,51:$VP1,52:$VQ1,53:$VR1,54:$VS1,55:$VT1,57:$VU1}),o($Vl1,[2,97]),o($Vl1,[2,98])],
defaultActions: {55:[2,1],98:[2,125],99:[2,126],100:[2,127],101:[2,128],102:[2,129],105:[2,21],106:[2,22],154:[2,170],155:[2,171],188:[2,156],189:[2,157],245:[2,154],246:[2,155],250:[2,168],251:[2,169],304:[2,158],305:[2,159],306:[2,161],307:[2,162],308:[2,164],309:[2,165]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 35; 
break;
case 3: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 22; 
break;
case 4: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 5: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 65; 
break;
case 6: return "LF";
break;
case 7: /* console.log("Empty spaces"); */ 
break;
case 8: return 124; 
break;
case 9: return 125; 
break;
case 10: return 126; 
break;
case 11: return 127; 
break;
case 12: return 87; 
break;
case 13: return 112; 
break;
case 14: return 128; 
break;
case 15: return 31; 
break;
case 16: return 129; 
break;
case 17: return 130; 
break;
case 18: return 131; 
break;
case 19: return 132; 
break;
case 20: return 86; 
break;
case 21: return 133; 
break;
case 22: return 136; 
break;
case 23: return 134; 
break;
case 24: return 135; 
break;
case 25: return 71 
break;
case 26: return 73 
break;
case 27: return 77 
break;
case 28: return 78 
break;
case 29: return 76 
break;
case 30: return 74 
break;
case 31: return 81 
break;
case 32: return 82 
break;
case 33: return 80 
break;
case 34: return 79 
break;
case 35: return 91 
break;
case 36: return 83 
break;
case 37: return 114 
break;
case 38: return 115 
break;
case 39: return 117 
break;
case 40: return 116 
break;
case 41: return 113 
break;
case 42: return 88 
break;
case 43: return 89 
break;
case 44: return 90 
break;
case 45: return 92 
break;
case 46: return 93 
break;
case 47: return 94 
break;
case 48: return 95 
break;
case 49: return 96 
break;
case 50: return 99 
break;
case 51: return 100 
break;
case 52: return 101 
break;
case 53: return 102 
break;
case 54: return 103 
break;
case 55: return 104 
break;
case 56: return 105 
break;
case 57: return 106 
break;
case 58: return 97 
break;
case 59: return 98 
break;
case 60: return 118 
break;
case 61: return 119 
break;
case 62: return 120 
break;
case 63: return 121 
break;
case 64: return 122 
break;
case 65: return 123 
break;
case 66: return 109 
break;
case 67: return 107 
break;
case 68: return 108 
break;
case 69: return 110 
break;
case 70: return 139 
break;
case 71: return 140 
break;
case 72: return 141 
break;
case 73: return 32 
break;
case 74: return 19 
break;
case 75: return 30 
break;
case 76: return 31 
break;
case 77: return 24 
break;
case 78: return 28 
break;
case 79: return 111 
break;
case 80: return 34 
break;
case 81: yy_.yytext = yy_.yytext.slice(1,-1); return 33; 
break;
case 82: return 18; 
break;
case 83: yy_.yytext = yy_.yytext.slice(1); return 25; 
break;
case 84: yy_.yytext = yy_.yytext.slice(1); return 68; 
break;
case 85: return 16; 
break;
case 86: return 69
break;
case 87: return 58
break;
case 88: return 59
break;
case 89: return 137
break;
case 90: return 138
break;
case 91: return 37
break;
case 92: return 38
break;
case 93: return 42
break;
case 94: return 40
break;
case 95: return 39
break;
case 96: return 41
break;
case 97: return 61 
break;
case 98: return 43 
break;
case 99: return 44 
break;
case 100: return 47 
break;
case 101: return 55 
break;
case 102: return 54 
break;
case 103: return 46 
break;
case 104: return 45 
break;
case 105: return 52 
break;
case 106: return 53 
break;
case 107: return 50 
break;
case 108: return 51 
break;
case 109: return 49 
break;
case 110: return 48 
break;
case 111: return 26 
break;
case 112: return 56 
break;
case 113: return 36 
break;
case 114: return 57 
break;
case 115: return 21 
break;
case 116: return 23 
break;
case 117: return 5; 
break;
case 118: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:MAXMEM\b)/,/^(?:HASHPOS\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:HASHK1\b)/,/^(?:HASHK\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:HASHP1\b)/,/^(?:HASHP\b)/,/^(?:ECRECOVER\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:SLT\b)/,/^(?:EQ\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:SHL\b)/,/^(?:SHR\b)/,/^(?:CNT_ARITH\b)/,/^(?:CNT_BINARY\b)/,/^(?:CNT_KECCAK_F\b)/,/^(?:CNT_MEM_ALIGN\b)/,/^(?:CNT_PADDING_PG\b)/,/^(?:CNT_POSEIDON_G\b)/,/^(?:MEM_ALIGN_WR8\b)/,/^(?:MEM_ALIGN_RD\b)/,/^(?:MEM_ALIGN_WR\b)/,/^(?:INST_MAP_ROM\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:NAMESPACE\b)/,/^(?:"[^"]+")/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*\.)?[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%([a-zA-Z_][a-zA-Z_0-9]*\.)?[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@([a-zA-Z_][a-zA-Z_0-9]*\.)?[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}