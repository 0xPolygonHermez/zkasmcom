/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,15],$V5=[1,29],$V6=[1,14],$V7=[1,17],$V8=[1,20],$V9=[1,22],$Va=[1,27],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,28],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[5,12,14,16,17,19,21,22,29,32,34,48,58,59,60,61,62,63,64,65,66,67,68],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,48],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[1,53],$Vz=[1,54],$VA=[1,55],$VB=[1,56],$VC=[12,14],$VD=[12,14,25,27,29],$VE=[1,66],$VF=[12,14,25,27,29,30],$VG=[12,14,25,27,29,30,36],$VH=[1,70],$VI=[12,36],$VJ=[1,94],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,97],$VR=[1,98],$VS=[12,14,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"include":10,"command":11,"LF":12,"assignment":13,":":14,"opList":15,"IDENTIFIER":16,"VAR":17,"scope":18,"COMMAND":19,"GLOBAL":20,"CTX":21,"INCLUDE":22,"STRING":23,"inRegsSum":24,"=>":25,"regsList":26,"+":27,"inRegP":28,"-":29,"*":30,"inReg":31,"TAG":32,"reg":33,"NUMBER":34,"**":35,",":36,"op":37,"MLOAD":38,"(":39,"addr":40,")":41,"MSTORE":42,"HASHR":43,"hashId":44,"HASHW":45,"HASHE":46,"JMP":47,"E":48,"JMPC":49,"ASSERT":50,"ECRECOVER":51,"SLOAD":52,"SSTORE":53,"ARITH":54,"SHL":55,"SHR":56,"INST_MAP_ROM":57,"A":58,"B":59,"C":60,"D":61,"SR":62,"SP":63,"PC":64,"GAS":65,"uPC":66,"STEP":67,"MAXMEM":68,"++":69,"--":70,"SYS":71,"MEM":72,"CODE":73,"STACK":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"LF",14:":",16:"IDENTIFIER",17:"VAR",19:"COMMAND",20:"GLOBAL",21:"CTX",22:"INCLUDE",23:"STRING",25:"=>",27:"+",29:"-",30:"*",32:"TAG",34:"NUMBER",35:"**",36:",",38:"MLOAD",39:"(",41:")",42:"MSTORE",43:"HASHR",45:"HASHW",46:"HASHE",47:"JMP",48:"E",49:"JMPC",50:"ASSERT",51:"ECRECOVER",52:"SLOAD",53:"SSTORE",54:"ARITH",55:"SHL",56:"SHR",57:"INST_MAP_ROM",58:"A",59:"B",60:"C",61:"D",62:"SR",63:"SP",64:"PC",65:"GAS",66:"uPC",67:"STEP",68:"MAXMEM",69:"++",70:"--",71:"SYS",72:"MEM",73:"CODE",74:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[9,3],[11,1],[18,1],[18,1],[10,2],[13,3],[13,1],[24,3],[24,3],[24,2],[24,1],[28,3],[28,1],[31,1],[31,1],[31,3],[31,1],[26,3],[26,1],[15,3],[15,1],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[40,1],[40,3],[40,3],[40,2],[40,2],[40,1],[40,3],[40,3],[40,2],[40,2],[40,5],[40,5],[40,3],[40,5],[40,5],[40,3],[40,5],[40,5],[40,3],[40,5],[40,5],[40,3],[40,1],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8:

            this.$ = $$[$0];
        
break;
case 9:

            this.$ = null;
        
break;
case 10:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 12:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 13:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 14:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0]}
        
break;
case 15:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 18:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 19:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 20:

            this.$ = {in: $$[$0], out: []}
        
break;
case 21:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 22:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 23:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 24: case 26:

            this.$ = $$[$0]
        
break;
case 25:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 27:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 28:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 29:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 30:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 31:

            $$[$0-2].push($$[$0])
        
break;
case 32: case 34:

            this.$ = [$$[$0]]
        
break;
case 33:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 35:

            this.$ = $$[$0-1];
            this.$.mRD = 1;
        
break;
case 36:

            this.$ = $$[$0-1];
            this.$.mWR = 1;
        
break;
case 37:

            this.$ = $$[$0-1];
            this.$.hashRD = 1;
        
break;
case 38:

            this.$ = $$[$0-1];
            this.$.hashWR = 1;
        
break;
case 39:

            this.$ = $$[$0-1];
            this.$.hashE = 1;
        
break;
case 40:

            this.$ = {JMP: 1, offset: $$[$0-1]}
        
break;
case 41:

            this.$ = {JMP: 1, ind: 1, offset: 0}
        
break;
case 42:

            this.$ = {JMPC: 1, offset: $$[$0-1]}
        
break;
case 43:

            this.$ = {JMPC: 1, ind: 1, offset: 0}
        
break;
case 44:

            this.$ = {assert: 1}
        
break;
case 45:

            this.$ = {ecRecover: 1}
        
break;
case 46:

            this.$ = {sRD: 1}
        
break;
case 47:

            this.$ = {sWR: 1}
        
break;
case 48:

            this.$ = { arith: 1}
        
break;
case 49:

            this.$ = { shl: 1}
        
break;
case 50:

            this.$ = { shr: 1}
        
break;
case 51:

            this.$ = {instMapRom: 1}
        
break;
case 65:

            this.$ = { isStack: 1, isCode: 0, ind:0, incCode:0, incStack:0, offset: 0}
        
break;
case 66:

            this.$ = { isStack: 1, isCode: 0, ind:0, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 67:

            this.$ = { isStack: 1, isCode: 0, ind:0, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 68:

            this.$ = { isStack: 1, isCode: 0, ind:0, incCode:1, incStack: 1, offset: 0}
        
break;
case 69:

            this.$ = { isStack: 1, isCode: 0, ind:0, incCode:0, incStack: -1, offset: 0}
        
break;
case 70:

            this.$ = { isStack: 0, isCode: 1, ind:0, incCode:0, incStack: 0, offset: 0}
        
break;
case 71:

            this.$ = { isStack: 0, isCode: 1, ind:0, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 72:

            this.$ = { isStack: 0, isCode: 1, ind:0, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 73:

            this.$ = { isStack: 0, isCode: 1, ind:0, incCode:1, incStack: 0, offset: 0}
        
break;
case 74:

            this.$ = { isStack: 0, isCode: 1, ind:0, incCode:-1, incStack: 0, offset: 0}
        
break;
case 75:

            this.$ = { isStack: 0, isCode: 0, ind:1, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 76:

            this.$ = { isStack: 0, isCode: 0, ind:1, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 77:

            this.$ = { isStack: 0, isCode: 0, ind:1, iincCodenc:0, incStack: 0, offset: 0}
        
break;
case 78: case 84:

            this.$ = { isStack: 1, isCode: 1, ind:1, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 79: case 85:

            this.$ = { isStack: 1, isCode: 1, ind:1, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 80: case 86:

            this.$ = { isStack: 1, isCode: 1, ind:1, incCode:0, incStack: 0, offset: 0}
        
break;
case 81:

            this.$ = { isStack: 0, isCode: 1, ind:1, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 82:

            this.$ = { isStack: 0, isCode: 1, ind:1, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 83:

            this.$ = { isStack: 0, isCode: 1, ind:1, incCode:0, incStack: 0, offset: 0}
        
break;
case 87:

            this.$ = { offset: $$[$0] }
        
break;
case 88:

            this.$ = {ind: 0, offset:$$[$0]}
        
break;
case 89:

            this.$ = {ind: 1, offset:0}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:$V2,17:$V3,19:$V4,21:$V5,22:$V6,24:16,28:18,29:$V7,31:19,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},{1:[3]},{5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:$V1,16:$V2,17:$V3,19:$V4,21:$V5,22:$V6,24:16,28:18,29:$V7,31:19,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),{12:[1,39],14:[1,38]},{15:40,37:41,38:$Vn,42:$Vo,43:$Vp,45:$Vq,46:$Vr,47:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{14:[1,57]},{18:58,20:[1,59],21:[1,60]},{23:[1,61]},o($Vm,[2,15]),o($VC,[2,20],{25:[1,62],27:[1,63],29:[1,64]}),{21:$V5,28:65,31:19,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},o($VD,[2,24],{30:$VE}),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28]),o($VF,[2,30],{35:[1,67]}),o($VG,[2,52]),o($VG,[2,53]),o($VG,[2,54]),o($VG,[2,55]),o($VG,[2,56]),o($VG,[2,57]),o($VG,[2,58]),o($VG,[2,59]),o($VG,[2,60]),o($VG,[2,61]),o($VG,[2,62]),o($VG,[2,63]),o($VG,[2,64]),{1:[2,1]},o($Vm,[2,2]),{15:68,37:41,38:$Vn,42:$Vo,43:$Vp,45:$Vq,46:$Vr,47:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($Vm,[2,11]),{12:[1,69],36:$VH},o($VI,[2,34]),{39:[1,71]},{39:[1,72]},{39:[1,73]},{39:[1,74]},{39:[1,75]},{39:[1,76]},{39:[1,77]},o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,49]),o($VI,[2,50]),o($VI,[2,51]),o($Vm,[2,13]),{16:[1,78]},{16:[2,16]},{16:[2,17]},o($Vm,[2,18]),{21:$V5,26:79,33:80,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},{21:$V5,28:81,31:19,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},{21:$V5,28:82,31:19,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},o($VD,[2,23],{30:$VE}),{21:$V5,31:83,32:$V8,33:21,34:$V9,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},{34:[1,84]},{12:[1,85],36:$VH},o($Vm,[2,12]),{37:86,38:$Vn,42:$Vo,43:$Vp,45:$Vq,46:$Vr,47:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{16:$VJ,40:87,63:$VK,64:$VL,71:$VM,72:$VN,73:$VO,74:$VP},{16:$VJ,40:95,63:$VK,64:$VL,71:$VM,72:$VN,73:$VO,74:$VP},{34:$VQ,44:96,48:$VR},{34:$VQ,44:99,48:$VR},{34:$VQ,44:100,48:$VR},{16:[1,101],48:[1,102]},{16:[1,103],48:[1,104]},o($Vm,[2,14]),o($VC,[2,19],{36:[1,105]}),o($VS,[2,32]),o($VD,[2,21],{30:$VE}),o($VD,[2,22],{30:$VE}),o($VF,[2,25]),o($VF,[2,29]),o($Vm,[2,10]),o($VI,[2,33]),{41:[1,106]},{27:[1,107],29:[1,108],41:[2,65],69:[1,109],70:[1,110]},{27:[1,111],29:[1,112],41:[2,70],69:[1,113],70:[1,114]},{14:[1,115]},{14:[1,116]},{14:[1,117]},{14:[1,118]},{41:[2,87]},{41:[1,119]},{41:[1,120]},{41:[2,88]},{41:[2,89]},{41:[1,121]},{41:[1,122]},{41:[1,123]},{41:[1,124]},{41:[1,125]},{41:[1,126]},{21:$V5,33:127,48:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl},o($VI,[2,35]),{34:[1,128]},{34:[1,129]},{41:[2,68]},{41:[2,69]},{34:[1,130]},{34:[1,131]},{41:[2,73]},{41:[2,74]},{48:[1,132]},{48:[1,133]},{48:[1,134]},{48:[1,135]},o($VI,[2,36]),o($VI,[2,37]),o($VI,[2,38]),o($VI,[2,39]),o($VI,[2,40]),o($VI,[2,41]),o($VI,[2,42]),o($VI,[2,43]),o($VS,[2,31]),{41:[2,66]},{41:[2,67]},{41:[2,71]},{41:[2,72]},{27:[1,136],29:[1,137],41:[2,77]},{27:[1,138],29:[1,139],41:[2,80]},{27:[1,140],29:[1,141],41:[2,83]},{27:[1,142],29:[1,143],41:[2,86]},{34:[1,144]},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{34:[1,149]},{34:[1,150]},{34:[1,151]},{41:[2,75]},{41:[2,76]},{41:[2,78]},{41:[2,79]},{41:[2,81]},{41:[2,82]},{41:[2,84]},{41:[2,85]}],
defaultActions: {36:[2,1],59:[2,16],60:[2,17],94:[2,87],97:[2,88],98:[2,89],109:[2,68],110:[2,69],113:[2,73],114:[2,74],128:[2,66],129:[2,67],130:[2,71],131:[2,72],144:[2,75],145:[2,76],146:[2,78],147:[2,79],148:[2,81],149:[2,82],150:[2,84],151:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 34; 
break;
case 2: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 3: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 32; 
break;
case 4: return "LF";
break;
case 5: /* console.log("Empty spaces"); */ 
break;
case 6: return 58; 
break;
case 7: return 59; 
break;
case 8: return 60; 
break;
case 9: return 61; 
break;
case 10: return 48; 
break;
case 11: return 62; 
break;
case 12: return 21; 
break;
case 13: return 63; 
break;
case 14: return 64; 
break;
case 15: return 65; 
break;
case 16: return 66; 
break;
case 17: return 67; 
break;
case 18: return 68; 
break;
case 19: return 38 
break;
case 20: return 42 
break;
case 21: return 43 
break;
case 22: return 45 
break;
case 23: return 46 
break;
case 24: return 51 
break;
case 25: return 47 
break;
case 26: return 49 
break;
case 27: return 50 
break;
case 28: return 52 
break;
case 29: return 53 
break;
case 30: return 54 
break;
case 31: return 55 
break;
case 32: return 56 
break;
case 33: return 57 
break;
case 34: return 71 
break;
case 35: return 72 
break;
case 36: return 73 
break;
case 37: return 74 
break;
case 38: return 22 
break;
case 39: return 17 
break;
case 40: return 20 
break;
case 41: return 21 
break;
case 42: yy_.yytext = yy_.yytext.slice(1,-1); return 23; 
break;
case 43: return 16; 
break;
case 44: return 14; 
break;
case 45: return 36
break;
case 46: return 39
break;
case 47: return 41
break;
case 48: return 69
break;
case 49: return 70
break;
case 50: return 27
break;
case 51: return 29
break;
case 52: return 35
break;
case 53: return 30
break;
case 54: return 25 
break;
case 55: return 5; 
break;
case 56: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:uPC\b)/,/^(?:STEP\b)/,/^(?:MAXMEM\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHR\b)/,/^(?:HASHW\b)/,/^(?:HASHE\b)/,/^(?:ECRECOVER\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:SHL\b)/,/^(?:SHR\b)/,/^(?:INST_MAP_ROM\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:CODE\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9\+\.\>\<\=\-\!]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:=>)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}