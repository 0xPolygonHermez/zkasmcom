/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,27],$V5=[1,29],$V6=[1,15],$V7=[1,16],$V8=[1,18],$V9=[1,37],$Va=[1,17],$Vb=[1,28],$Vc=[1,20],$Vd=[1,23],$Ve=[1,24],$Vf=[1,30],$Vg=[1,41],$Vh=[1,35],$Vi=[1,46],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,31],$Vr=[1,32],$Vs=[1,33],$Vt=[1,34],$Vu=[1,36],$Vv=[1,38],$Vw=[1,39],$Vx=[1,40],$Vy=[1,42],$Vz=[1,43],$VA=[1,44],$VB=[1,45],$VC=[1,47],$VD=[5,13,15,17,18,21,23,24,27,28,30,31,33,36,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$VE=[1,61],$VF=[1,62],$VG=[1,63],$VH=[1,64],$VI=[1,65],$VJ=[1,66],$VK=[1,67],$VL=[1,68],$VM=[1,69],$VN=[1,70],$VO=[1,71],$VP=[1,72],$VQ=[1,73],$VR=[1,74],$VS=[1,75],$VT=[1,78],$VU=[1,79],$VV=[1,80],$VW=[1,81],$VX=[1,82],$VY=[1,83],$VZ=[1,84],$V_=[1,85],$V$=[1,86],$V01=[1,87],$V11=[1,88],$V21=[1,89],$V31=[1,90],$V41=[1,91],$V51=[1,92],$V61=[1,93],$V71=[1,94],$V81=[1,95],$V91=[1,96],$Va1=[1,97],$Vb1=[1,98],$Vc1=[1,99],$Vd1=[1,100],$Ve1=[1,101],$Vf1=[1,102],$Vg1=[1,103],$Vh1=[1,104],$Vi1=[1,105],$Vj1=[1,106],$Vk1=[1,107],$Vl1=[1,108],$Vm1=[13,15],$Vn1=[13,15,35,36,59],$Vo1=[1,120],$Vp1=[13,15,35,36,37,59],$Vq1=[13,15,35,36,37,57,59,68],$Vr1=[1,125],$Vs1=[13,68],$Vt1=[1,164],$Vu1=[1,160],$Vv1=[1,161],$Vw1=[1,162],$Vx1=[1,163],$Vy1=[1,167],$Vz1=[1,169],$VA1=[1,168],$VB1=[1,197],$VC1=[1,199],$VD1=[1,198],$VE1=[1,200],$VF1=[1,201],$VG1=[1,202],$VH1=[1,204],$VI1=[13,15,57,68],$VJ1=[5,13,15,17,18,21,23,24,27,28,30,31,33,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$VK1=[1,250],$VL1=[1,251],$VM1=[1,252],$VN1=[1,253],$VO1=[1,254],$VP1=[1,255],$VQ1=[1,256],$VR1=[1,257],$VS1=[1,258],$VT1=[1,259],$VU1=[1,260],$VV1=[1,261],$VW1=[1,262],$VX1=[1,263],$VY1=[1,264],$VZ1=[1,265],$V_1=[1,266],$V$1=[1,267],$V02=[1,268],$V12=[1,269],$V22=[5,13,15,17,18,21,23,24,27,28,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V32=[5,13,15,17,18,21,23,24,27,28,30,31,33,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V42=[5,13,15,17,18,21,23,24,27,28,30,31,33,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V52=[5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V62=[5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,50,51,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"assignment":14,":":15,"opList":16,"IDENTIFIER":17,"VAR":18,"scope":19,"[":20,"NUMBER":21,"]":22,"CONSTID":23,"CONST":24,"=":25,"nexpr":26,"CONSTL":27,"COMMAND":28,"GLOBAL":29,"CTX":30,"INCLUDE":31,"STRING":32,"NUMBERL":33,"??":34,"+":35,"-":36,"*":37,"**":38,"%":39,"/":40,"<<":41,">>":42,"|":43,"&":44,"^":45,"<":46,">":47,"<=":48,">=":49,"==":50,"!=":51,"&&":52,"||":53,"!":54,"?":55,"(":56,")":57,"inRegsSum":58,"=>":59,"regsList":60,"inRegP":61,"inReg":62,"TAG":63,"TAG_0":64,"reg":65,"counter":66,"REFERENCE":67,",":68,"op":69,"MLOAD":70,"addr":71,"MSTORE":72,"HASHK":73,"hashId":74,"HASHK1":75,"HASHKLEN":76,"HASHKDIGEST":77,"HASHS":78,"HASHS1":79,"HASHSLEN":80,"HASHSDIGEST":81,"HASHP":82,"HASHP1":83,"HASHPLEN":84,"HASHPDIGEST":85,"JMP":86,"jmpCond":87,"jmpNotCond":88,"RR":89,"E":90,"CALL":91,"RETURN":92,"ASSERT":93,"SLOAD":94,"SSTORE":95,"ARITH":96,"ARITH_ECADD_DIFFERENT":97,"ARITH_ECADD_SAME":98,"ARITH_BN254_MULFP2":99,"ARITH_BN254_ADDFP2":100,"ARITH_BN254_SUBFP2":101,"ADD":102,"SUB":103,"LT":104,"SLT":105,"EQ":106,"AND":107,"OR":108,"XOR":109,"LT4":110,"MEM_ALIGN_RD":111,"MEM_ALIGN_WR":112,"MEM_ALIGN_WR8":113,"REPEAT":114,"RCX":115,"SAVE":116,"RESTORE":117,"JMPN":118,"JMPC":119,"JMPZ":120,"JMPNC":121,"JMPNZ":122,"CNT_ARITH":123,"CNT_BINARY":124,"CNT_KECCAK_F":125,"CNT_SHA256_F":126,"CNT_MEM_ALIGN":127,"CNT_PADDING_PG":128,"CNT_POSEIDON_G":129,"A":130,"B":131,"C":132,"D":133,"SR":134,"SP":135,"PC":136,"GAS":137,"zkPC":138,"STEP":139,"HASHPOS":140,"ROTL_C":141,"RID":142,"saveReg":143,"++":144,"--":145,"SYS":146,"MEM":147,"STACK":148,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"LF",15:":",17:"IDENTIFIER",18:"VAR",20:"[",21:"NUMBER",22:"]",23:"CONSTID",24:"CONST",25:"=",27:"CONSTL",28:"COMMAND",29:"GLOBAL",30:"CTX",31:"INCLUDE",32:"STRING",33:"NUMBERL",34:"??",35:"+",36:"-",37:"*",38:"**",39:"%",40:"/",41:"<<",42:">>",43:"|",44:"&",45:"^",46:"<",47:">",48:"<=",49:">=",50:"==",51:"!=",52:"&&",53:"||",54:"!",55:"?",56:"(",57:")",59:"=>",63:"TAG",64:"TAG_0",67:"REFERENCE",68:",",70:"MLOAD",72:"MSTORE",73:"HASHK",75:"HASHK1",76:"HASHKLEN",77:"HASHKDIGEST",78:"HASHS",79:"HASHS1",80:"HASHSLEN",81:"HASHSDIGEST",82:"HASHP",83:"HASHP1",84:"HASHPLEN",85:"HASHPDIGEST",86:"JMP",89:"RR",90:"E",91:"CALL",92:"RETURN",93:"ASSERT",94:"SLOAD",95:"SSTORE",96:"ARITH",97:"ARITH_ECADD_DIFFERENT",98:"ARITH_ECADD_SAME",99:"ARITH_BN254_MULFP2",100:"ARITH_BN254_ADDFP2",101:"ARITH_BN254_SUBFP2",102:"ADD",103:"SUB",104:"LT",105:"SLT",106:"EQ",107:"AND",108:"OR",109:"XOR",110:"LT4",111:"MEM_ALIGN_RD",112:"MEM_ALIGN_WR",113:"MEM_ALIGN_WR8",114:"REPEAT",115:"RCX",116:"SAVE",117:"RESTORE",118:"JMPN",119:"JMPC",120:"JMPZ",121:"JMPNC",122:"JMPNZ",123:"CNT_ARITH",124:"CNT_BINARY",125:"CNT_KECCAK_F",126:"CNT_SHA256_F",127:"CNT_MEM_ALIGN",128:"CNT_PADDING_PG",129:"CNT_POSEIDON_G",130:"A",131:"B",132:"C",133:"D",134:"SR",135:"SP",136:"PC",137:"GAS",138:"zkPC",139:"STEP",140:"HASHPOS",141:"ROTL_C",142:"RID",144:"++",145:"--",146:"SYS",147:"MEM",148:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[9,3],[9,6],[9,6],[10,4],[10,4],[12,1],[19,1],[19,1],[11,2],[26,1],[26,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,5],[26,3],[14,3],[14,1],[58,3],[58,3],[58,2],[58,1],[61,3],[61,1],[62,1],[62,1],[62,1],[62,1],[62,3],[62,3],[62,1],[62,1],[62,1],[62,1],[60,3],[60,1],[16,3],[16,1],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,6],[69,4],[69,6],[69,4],[69,4],[69,6],[69,6],[69,4],[69,4],[69,6],[69,6],[69,6],[69,6],[69,8],[69,8],[69,4],[69,6],[69,6],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,4],[69,4],[69,4],[69,1],[87,1],[87,1],[87,1],[88,1],[88,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[71,1],[71,3],[71,3],[71,2],[71,2],[71,5],[71,5],[71,3],[71,5],[71,5],[71,3],[71,5],[71,5],[71,3],[71,5],[71,5],[71,3],[71,5],[71,5],[71,3],[71,5],[71,5],[71,3],[71,1],[71,3],[71,3],[71,4],[71,6],[71,6],[71,3],[71,4],[74,1],[74,1],[74,1],[74,3],[74,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 9:

            this.$ = $$[$0];
        
break;
case 10:

            this.$ = null;
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 13:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 14:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 15:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 16: case 17:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 18:

            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 19:

            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 20:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 23:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 24: case 25:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 26: case 67:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 27:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 28: case 29: case 30: case 31: case 32: case 33: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 34: case 48:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 49:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 50:

            this.$ = $$[$0-1]
        
break;
case 51:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 52:

            this.$ = {in: $$[$0], out: []}
        
break;
case 53:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 54:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 55:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 56: case 58:

            this.$ = $$[$0]
        
break;
case 57:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 59:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 60:

            this.$ = {type: 'TAG_0' , tag: $$[$0]}
        
break;
case 61:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 62:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 63:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 64:

            this.$ = {type: "expl", values: [$$[$0-2], $$[$0]]}
        
break;
case 65:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 66:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 68:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 69:

            $$[$0-2].push($$[$0])
        
break;
case 70: case 72:

            this.$ = [$$[$0]]
        
break;
case 71:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 73:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 0;
        
break;
case 74:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 1;
        
break;
case 75:

            this.$ = $$[$0-1];
            this.$.hashK = 1;
        
break;
case 76:

            this.$ = $$[$0-1];
            this.$.hashK1 = 1;
        
break;
case 77:

            this.$ = $$[$0-1];
            this.$.hashKLen = 1;
        
break;
case 78:

            this.$ = $$[$0-1];
            this.$.hashKDigest = 1;
        
break;
case 79:

            this.$ = $$[$0-1];
            this.$.hashS = 1;
        
break;
case 80:

            this.$ = $$[$0-1];
            this.$.hashS1 = 1;
        
break;
case 81:

            this.$ = $$[$0-1];
            this.$.hashSLen = 1;
        
break;
case 82:

            this.$ = $$[$0-1];
            this.$.hashSDigest = 1;
        
break;
case 83:

            this.$ = $$[$0-1];
            this.$.hashP = 1;
        
break;
case 84:

            this.$ = $$[$0-1];
            this.$.hashP1 = 1;
        
break;
case 85:

            this.$ = $$[$0-1];
            this.$.hashPLen = 1;
        
break;
case 86:

            this.$ = $$[$0-1];
            this.$.hashPDigest = 1;
        
break;
case 87:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1] }
        
break;
case 88:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 89:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-3], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 90:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: 'next', useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 91:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr:  $$[$0-1], useElseAddr: 1, elseAddr: $$[$0-3] }
        
break;
case 92:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0 }
        
break;
case 93:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0 }
        
break;
case 94:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3] }
        
break;
case 95:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3] }
        
break;
case 96:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: 'next' }
        
break;
case 97:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: 'next' }
        
break;
case 98:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 99:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 100:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 101:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 102:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 103:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 104:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, useJmpAddr:1, jmpAddr: $$[$0-1], call: 1}
        
break;
case 105:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 0, indRR: 1, return: 0, call: 1}
        
break;
case 106:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 1, indRR: 0, return: 0, call: 1}
        
break;
case 107:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  call: 0, return: 1}
        
break;
case 108:

            this.$ = {assert: 1}
        
break;
case 109:

            this.$ = {sRD: 1}
        
break;
case 110:

            this.$ = {sWR: 1}
        
break;
case 111:

            this.$ = { arithEq0: 1, arithEq1: 0, arithEq2: 0, arithEq3: 0, arithEq4: 0, arithEq5: 0 }
        
break;
case 112:

            this.$ = { arithEq0: 0, arithEq1: 1, arithEq2: 0, arithEq3: 0, arithEq4: 0, arithEq5: 0 }
        
break;
case 113:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 1, arithEq3: 0, arithEq4: 0, arithEq5: 0 }
        
break;
case 114:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 0, arithEq3: 1, arithEq4: 0, arithEq5: 0 }
        
break;
case 115:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 0, arithEq3: 0, arithEq4: 1, arithEq5: 0 }
        
break;
case 116:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 0, arithEq3: 0, arithEq4: 0, arithEq5: 1 }
        
break;
case 117:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 118:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 119:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 120:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 121:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 122:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 123:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 124:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 125:

            this.$ = { bin: 1, binOpcode: 8}
        
break;
case 126:

            this.$ = { memAlignRD: 1, memAlignWR: 0, memAlignWR8: 0}
        
break;
case 127:

            this.$ = { memAlignRD: 0, memAlignWR: 1, memAlignWR8: 0}
        
break;
case 128:

            this.$ = { memAlignRD: 0, memAlignWR: 0, memAlignWR8: 1}
        
break;
case 129:

            this.$ = { repeat: 1 }
        
break;
case 130:

            this.$ = { save: 1, restore: 0, regs: $$[$0-1] }
        
break;
case 131:

            this.$ = { save: 0, restore: 1, regs: $$[$0-1] }
        
break;
case 132:

            this.$ = { save: 0, restore: 1, regs: false }
        
break;
case 136:
 this.$ = 'JMPC' 
break;
case 137:
 this.$ = 'JMPZ' 
break;
case 138:
 this.$ = 'cntArith' 
break;
case 139:
 this.$ = 'cntBinary' 
break;
case 140:
 this.$ = 'cntKeccakF' 
break;
case 141:
 this.$ = 'cntSha256F' 
break;
case 142:
 this.$ = 'cntMemAlign' 
break;
case 143:
 this.$ = 'cntPaddingPG' 
break;
case 144:
 this.$ = 'cntPoseidonG' 
break;
case 173:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 174:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 175:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 176:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 1, offset: 0, useCTX: 1}
        
break;
case 177:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: -1, offset: 0, useCTX: 1}
        
break;
case 178:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: $$[$0]}
        
break;
case 179:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: -$$[$0]}
        
break;
case 180:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: 0}
        
break;
case 181:

            this.$ = { isStack: 0, isMem:0, ind:0, indRR: 1, incStack: 0, offset: $$[$0]}
        
break;
case 182:

            this.$ = { isStack: 0, isMem:0, ind:0, indRR: 1, incStack: 0, offset: -$$[$0]}
        
break;
case 183:

            this.$ = { isStack: 0, isMem:0, ind:0, indRR: 1, incStack: 0, offset: 0}
        
break;
case 184:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 185:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 186:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 187:

            this.$ = { isStack: 0, isMem: 1, ind:0, indRR: 1, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 188:

            this.$ = { isStack: 0, isMem: 1, ind:0, indRR: 1, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 189:

            this.$ = { isStack: 0, isMem: 1, ind:0, indRR: 1, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 190:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 191:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 192:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 193:

            this.$ = { isStack: 1, ind:0, indRR: 1, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 194:

            this.$ = { isStack: 1, ind:0, indRR: 1, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 195:

            this.$ = { isStack: 1, ind:0, indRR: 1, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 196:

            this.$ = { offset: $$[$0] }
        
break;
case 197:

            this.$ = { offset: $$[$0-2], ind: 0, indRR: 1 }
        
break;
case 198:

            this.$ = { offset: $$[$0-2], ind: 1, indRR: 0 }
        
break;
case 199:

            this.$ = { offset: $$[$0-3], ind: 1, indRR: 0 }
        
break;
case 200:

            this.$ = { offset: $$[$0-5], extraOffset: -$$[$0-1], ind: 1, indRR: 0 }
        
break;
case 201:

            this.$ = { offset: $$[$0-5], extraOffset: $$[$0-1], ind: 1, indRR: 0 }
        
break;
case 202:

            this.$ = { offset: $$[$0-2], extraOffset: $$[$0] }
        
break;
case 203:

            this.$ = { offset: $$[$0-3], extraOffset: $$[$0-1] }
        
break;
case 204:

            this.$ = {ind: 0, indRR: 0, offset:$$[$0]}
        
break;
case 205:

            this.$ = {ind: 1, indRR: 0, offset:0}
        
break;
case 206:

            this.$ = {ind: 0, indRR: 1, offset:0}
        
break;
case 207:

            this.$ = {ind: 1, indRR: 0, offset:$$[$0]}
        
break;
case 208:

            this.$ = {ind: 0, indRR: 1, offset:$$[$0]}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,21:$V4,23:$V5,24:$V6,27:$V7,28:$V8,30:$V9,31:$Va,33:$Vb,36:$Vc,58:19,61:21,62:22,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},{1:[3]},{5:[1,55],6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,21:$V4,23:$V5,24:$V6,27:$V7,28:$V8,30:$V9,31:$Va,33:$Vb,36:$Vc,58:19,61:21,62:22,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},o($VD,[2,3]),o($VD,[2,4]),o($VD,[2,5]),o($VD,[2,6]),o($VD,[2,7]),o($VD,[2,8]),o($VD,[2,9]),o($VD,[2,10]),{13:[1,58],15:[1,57]},{16:59,69:60,70:$VE,72:$VF,73:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP,84:$VQ,85:$VR,86:$VS,87:76,88:77,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01,101:$V11,102:$V21,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,116:$Vf1,117:$Vg1,118:$Vh1,119:$Vi1,120:$Vj1,121:$Vk1,122:$Vl1},{15:[1,109]},{19:110,29:[1,111],30:[1,112]},{23:[1,113]},{23:[1,114]},{32:[1,115]},o($VD,[2,20]),o($Vm1,[2,52],{35:[1,117],36:[1,118],59:[1,116]}),{21:$V4,23:$V5,30:$V9,33:$Vb,61:119,62:22,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},o($Vn1,[2,56],{37:$Vo1}),o($Vp1,[2,58]),o($Vp1,[2,59]),o($Vp1,[2,60]),o($Vp1,[2,61]),o($Vp1,[2,62]),o($Vp1,[2,65],{38:[1,121]}),o($Vp1,[2,66],{38:[1,122]}),o($Vp1,[2,67]),o($Vp1,[2,68]),o($Vq1,[2,145]),o($Vq1,[2,146]),o($Vq1,[2,147]),o($Vq1,[2,148]),o($Vq1,[2,149]),o($Vq1,[2,150]),o($Vq1,[2,151]),o($Vq1,[2,152]),o($Vq1,[2,153]),o($Vq1,[2,154]),o($Vq1,[2,155]),o($Vq1,[2,156]),o($Vq1,[2,157]),o($Vq1,[2,158]),o($Vq1,[2,159]),o($Vq1,[2,160]),o($Vq1,[2,161]),o($Vp1,[2,138]),o($Vp1,[2,139]),o($Vp1,[2,140]),o($Vp1,[2,141]),o($Vp1,[2,142]),o($Vp1,[2,143]),o($Vp1,[2,144]),{1:[2,1]},o($VD,[2,2]),{16:123,69:60,70:$VE,72:$VF,73:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP,84:$VQ,85:$VR,86:$VS,87:76,88:77,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01,101:$V11,102:$V21,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,116:$Vf1,117:$Vg1,118:$Vh1,119:$Vi1,120:$Vj1,121:$Vk1,122:$Vl1},o($VD,[2,12]),{13:[1,124],68:$Vr1},o($Vs1,[2,72]),{56:[1,126]},{56:[1,127]},{56:[1,128]},{56:[1,129]},{56:[1,130]},{56:[1,131]},{56:[1,132]},{56:[1,133]},{56:[1,134]},{56:[1,135]},{56:[1,136]},{56:[1,137]},{56:[1,138]},{56:[1,139]},{56:[1,140]},{56:[1,141]},{56:[1,142]},{56:[1,143]},o($Vs1,[2,107]),o($Vs1,[2,108]),o($Vs1,[2,109]),o($Vs1,[2,110]),o($Vs1,[2,111]),o($Vs1,[2,112]),o($Vs1,[2,113]),o($Vs1,[2,114]),o($Vs1,[2,115]),o($Vs1,[2,116]),o($Vs1,[2,117]),o($Vs1,[2,118]),o($Vs1,[2,119]),o($Vs1,[2,120]),o($Vs1,[2,121]),o($Vs1,[2,122]),o($Vs1,[2,123]),o($Vs1,[2,124]),o($Vs1,[2,125]),o($Vs1,[2,126]),o($Vs1,[2,127]),o($Vs1,[2,128]),{56:[1,144]},{56:[1,145]},o($Vs1,[2,132],{56:[1,146]}),{56:[2,133]},{56:[2,134]},{56:[2,135]},{56:[2,136]},{56:[2,137]},o($VD,[2,14]),{17:[1,147]},{17:[2,21]},{17:[2,22]},{25:[1,148]},{25:[1,149]},o($VD,[2,23]),{30:$V9,60:150,65:151,89:$Vg,90:$Vh,115:$Vi,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},{21:$V4,23:$V5,30:$V9,33:$Vb,61:152,62:22,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},{21:$V4,23:$V5,30:$V9,33:$Vb,61:153,62:22,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},o($Vn1,[2,55],{37:$Vo1}),{21:$V4,23:$V5,30:$V9,33:$Vb,62:154,63:$Vd,64:$Ve,65:25,66:26,67:$Vf,89:$Vg,90:$Vh,115:$Vi,123:$Vj,124:$Vk,125:$Vl,126:$Vm,127:$Vn,128:$Vo,129:$Vp,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},{21:[1,155]},{33:[1,156]},{13:[1,157],68:$Vr1},o($VD,[2,13]),{69:158,70:$VE,72:$VF,73:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP,84:$VQ,85:$VR,86:$VS,87:76,88:77,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01,101:$V11,102:$V21,103:$V31,104:$V41,105:$V51,106:$V61,107:$V71,108:$V81,109:$V91,110:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,116:$Vf1,117:$Vg1,118:$Vh1,119:$Vi1,120:$Vj1,121:$Vk1,122:$Vl1},{17:$Vt1,71:159,135:$Vu1,146:$Vv1,147:$Vw1,148:$Vx1},{17:$Vt1,71:165,135:$Vu1,146:$Vv1,147:$Vw1,148:$Vx1},{21:$Vy1,74:166,89:$Vz1,90:$VA1},{21:$Vy1,74:170,89:$Vz1,90:$VA1},{21:$Vy1,74:171,89:$Vz1,90:$VA1},{21:$Vy1,74:172,89:$Vz1,90:$VA1},{21:$Vy1,74:173,89:$Vz1,90:$VA1},{21:$Vy1,74:174,89:$Vz1,90:$VA1},{21:$Vy1,74:175,89:$Vz1,90:$VA1},{21:$Vy1,74:176,89:$Vz1,90:$VA1},{21:$Vy1,74:177,89:$Vz1,90:$VA1},{21:$Vy1,74:178,89:$Vz1,90:$VA1},{21:$Vy1,74:179,89:$Vz1,90:$VA1},{21:$Vy1,74:180,89:$Vz1,90:$VA1},{17:[1,181],67:[1,184],89:[1,182],90:[1,183]},{17:[1,185],67:[1,188],89:[1,186],90:[1,187]},{17:[1,189]},{17:[1,190],67:[1,191]},{115:[1,192]},{30:$V9,60:193,65:151,89:$Vg,90:$Vh,115:$Vi,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},{30:$V9,60:194,65:151,89:$Vg,90:$Vh,115:$Vi,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},o($VD,[2,15],{20:[1,195]}),{21:$VB1,23:$VC1,26:196,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:203,33:$VD1,36:$VE1,54:$VF1,56:$VG1},o($Vm1,[2,51],{68:$VH1}),o($VI1,[2,70]),o($Vn1,[2,53],{37:$Vo1}),o($Vn1,[2,54],{37:$Vo1}),o($Vp1,[2,57]),o($Vp1,[2,63]),o($Vp1,[2,64]),o($VD,[2,11]),o($Vs1,[2,71]),{57:[1,205]},{35:[1,206],36:[1,207],57:[2,173],144:[1,208],145:[1,209]},{15:[1,210]},{15:[1,211]},{15:[1,212]},{20:[1,214],35:[1,213],57:[2,196]},{57:[1,215]},{57:[1,216]},{57:[2,204]},{35:[1,217],57:[2,205]},{35:[1,218],57:[2,206]},{57:[1,219]},{57:[1,220]},{57:[1,221]},{57:[1,222]},{57:[1,223]},{57:[1,224]},{57:[1,225]},{57:[1,226]},{57:[1,227]},{57:[1,228]},{57:[1,229]},{57:[1,230]},{57:[1,231]},{57:[1,232]},{35:[1,233]},{57:[1,234],68:[1,235]},{57:[1,236],68:[1,237]},{57:[1,238],68:[1,239]},{35:[1,240]},{57:[1,241],68:[1,242]},{57:[1,243]},{35:[1,244]},{57:[1,245]},{57:[1,246],68:$VH1},{57:[1,247],68:$VH1},{21:[1,248],23:[1,249]},o($VJ1,[2,18],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02,55:$V12}),o($V22,[2,24]),o($V22,[2,25]),o($V22,[2,26],{34:[1,270]}),{21:$VB1,23:$VC1,26:271,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:272,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:273,33:$VD1,36:$VE1,54:$VF1,56:$VG1},o($VJ1,[2,19],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02,55:$V12}),{30:$V9,65:274,89:$Vg,90:$Vh,115:$Vi,130:$Vq,131:$Vr,132:$Vs,133:$Vt,134:$Vu,135:$Vv,136:$Vw,137:$Vx,138:$Vy,139:$Vz,140:$VA,141:$VB,142:$VC},o($Vs1,[2,73]),{21:[1,275]},{21:[1,276]},{57:[2,176]},{57:[2,177]},{89:[1,278],90:[1,277]},{89:[1,280],90:[1,279]},{89:[1,282],90:[1,281]},{21:[1,285],89:[1,283],90:[1,284]},{21:[1,287],90:[1,286]},o($Vs1,[2,74]),o($Vs1,[2,75]),{21:[1,288]},{21:[1,289]},o($Vs1,[2,76]),o($Vs1,[2,77]),o($Vs1,[2,78]),o($Vs1,[2,79]),o($Vs1,[2,80]),o($Vs1,[2,81]),o($Vs1,[2,82]),o($Vs1,[2,83]),o($Vs1,[2,84]),o($Vs1,[2,85]),o($Vs1,[2,86]),o($Vs1,[2,87]),o($Vs1,[2,92]),o($Vs1,[2,93]),{89:[1,290],90:[1,291]},o($Vs1,[2,88]),{17:[1,292]},o($Vs1,[2,96]),{17:[1,293]},o($Vs1,[2,97]),{17:[1,294]},{89:[1,295],90:[1,296]},o($Vs1,[2,90]),{17:[1,297]},o($Vs1,[2,104]),{89:[1,298],90:[1,299]},o($Vs1,[2,129]),o($Vs1,[2,130]),o($Vs1,[2,131]),{22:[1,300]},{22:[1,301]},{21:$VB1,23:$VC1,26:302,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:303,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:304,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:305,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:306,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:307,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:308,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:309,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:310,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:311,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:312,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:313,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:314,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:315,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:316,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:317,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:318,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:319,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:320,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:321,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{21:$VB1,23:$VC1,26:322,33:$VD1,36:$VE1,54:$VF1,56:$VG1},o($V32,[2,34],{37:$VM1,38:$VN1,39:$VO1,40:$VP1}),o($V22,[2,48]),{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02,55:$V12,57:[1,323]},o($VI1,[2,69]),{57:[2,174]},{57:[2,175]},{35:[1,324],36:[1,325],57:[2,180]},{35:[1,326],36:[1,327],57:[2,183]},{35:[1,328],36:[1,329],57:[2,186]},{35:[1,330],36:[1,331],57:[2,189]},{35:[1,332],36:[1,333],57:[2,192]},{35:[1,334],36:[1,335],57:[2,195]},{57:[2,197]},{57:[2,198]},{57:[2,202]},{22:[1,336],35:[1,338],36:[1,337]},{22:[1,339]},{57:[2,207]},{57:[2,208]},{57:[1,340]},{57:[1,341]},{57:[1,342]},{57:[1,343]},{57:[1,344]},{57:[1,345],68:[1,346]},{57:[1,347],68:[1,348]},{57:[1,349]},{57:[1,350]},{57:[1,351]},o($VD,[2,16]),o($VD,[2,17]),o($V32,[2,28],{37:$VM1,38:$VN1,39:$VO1,40:$VP1}),o($V32,[2,29],{37:$VM1,38:$VN1,39:$VO1,40:$VP1}),o($V22,[2,30]),o($V22,[2,31]),o($V22,[2,32]),o($V22,[2,33]),o($V42,[2,35],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1}),o($V42,[2,36],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,37],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,38],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,45,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,39],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,44:$VT1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1}),o($V52,[2,40],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1}),o($V52,[2,41],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1}),o($V52,[2,42],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1}),o($V52,[2,43],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1}),o($V62,[2,44],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,46:$VV1,47:$VW1,48:$VX1,49:$VY1}),o($V62,[2,45],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,46:$VV1,47:$VW1,48:$VX1,49:$VY1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,52,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,46],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,53,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,47],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1}),{15:[1,352],35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02,55:$V12},o([5,13,15,17,18,21,23,24,27,28,30,31,33,55,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,27],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02}),o($V22,[2,50]),{21:[1,353]},{21:[1,354]},{21:[1,355]},{21:[1,356]},{21:[1,357]},{21:[1,358]},{21:[1,359]},{21:[1,360]},{21:[1,361]},{21:[1,362]},{21:[1,363]},{21:[1,364]},{57:[2,199]},{21:[1,365]},{21:[1,366]},{57:[2,203]},o($Vs1,[2,94]),o($Vs1,[2,95]),o($Vs1,[2,89]),o($Vs1,[2,100]),o($Vs1,[2,101]),o($Vs1,[2,98]),{17:[1,367]},o($Vs1,[2,99]),{17:[1,368]},o($Vs1,[2,91]),o($Vs1,[2,105]),o($Vs1,[2,106]),{21:$VB1,23:$VC1,26:369,33:$VD1,36:$VE1,54:$VF1,56:$VG1},{57:[2,178]},{57:[2,179]},{57:[2,181]},{57:[2,182]},{57:[2,184]},{57:[2,185]},{57:[2,187]},{57:[2,188]},{57:[2,190]},{57:[2,191]},{57:[2,193]},{57:[2,194]},{22:[1,370]},{22:[1,371]},{57:[1,372]},{57:[1,373]},o([5,13,15,17,18,21,23,24,27,28,30,31,33,57,63,64,67,89,90,115,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,49],{35:$VK1,36:$VL1,37:$VM1,38:$VN1,39:$VO1,40:$VP1,41:$VQ1,42:$VR1,43:$VS1,44:$VT1,45:$VU1,46:$VV1,47:$VW1,48:$VX1,49:$VY1,50:$VZ1,51:$V_1,52:$V$1,53:$V02,55:$V12}),{57:[2,200]},{57:[2,201]},o($Vs1,[2,102]),o($Vs1,[2,103])],
defaultActions: {55:[2,1],104:[2,133],105:[2,134],106:[2,135],107:[2,136],108:[2,137],111:[2,21],112:[2,22],167:[2,204],208:[2,176],209:[2,177],275:[2,174],276:[2,175],283:[2,197],284:[2,198],285:[2,202],288:[2,207],289:[2,208],336:[2,199],339:[2,203],353:[2,178],354:[2,179],355:[2,181],356:[2,182],357:[2,184],358:[2,185],359:[2,187],360:[2,188],361:[2,190],362:[2,191],363:[2,193],364:[2,194],370:[2,200],371:[2,201]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 33; 
break;
case 3: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 21; 
break;
case 4: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 5: yy_.yytext = yy_.yytext.slice(3, -1); return 64; 
break;
case 6: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 63; 
break;
case 7: return "LF";
break;
case 8: /* console.log("Empty spaces"); */ 
break;
case 9: return 130; 
break;
case 10: return 131; 
break;
case 11: return 132; 
break;
case 12: return 133; 
break;
case 13: return 90; 
break;
case 14: return 115; 
break;
case 15: return 134; 
break;
case 16: return 30; 
break;
case 17: return 135; 
break;
case 18: return 136; 
break;
case 19: return 137; 
break;
case 20: return 138; 
break;
case 21: return 89; 
break;
case 22: return 139; 
break;
case 23: return 141; 
break;
case 24: return 140; 
break;
case 25: return 142; 
break;
case 26: return 70 
break;
case 27: return 72 
break;
case 28: return 76 
break;
case 29: return 77 
break;
case 30: return 75 
break;
case 31: return 73 
break;
case 32: return 80 
break;
case 33: return 81 
break;
case 34: return 79 
break;
case 35: return 78 
break;
case 36: return 84 
break;
case 37: return 85 
break;
case 38: return 83 
break;
case 39: return 82 
break;
case 40: return 86 
break;
case 41: return 119 
break;
case 42: return 120 
break;
case 43: return 122 
break;
case 44: return 121 
break;
case 45: return 118 
break;
case 46: return 91 
break;
case 47: return 92 
break;
case 48: return 93 
break;
case 49: return 94 
break;
case 50: return 95 
break;
case 51: return 96 
break;
case 52: return 97 
break;
case 53: return 98 
break;
case 54: return 100 
break;
case 55: return 101 
break;
case 56: return 99 
break;
case 57: return 102 
break;
case 58: return 103 
break;
case 59: return 104 
break;
case 60: return 105 
break;
case 61: return 106 
break;
case 62: return 107 
break;
case 63: return 108 
break;
case 64: return 109 
break;
case 65: return 110 
break;
case 66: return 123 
break;
case 67: return 124 
break;
case 68: return 125 
break;
case 69: return 126 
break;
case 70: return 127 
break;
case 71: return 128 
break;
case 72: return 129 
break;
case 73: return 113 
break;
case 74: return 111 
break;
case 75: return 112 
break;
case 76: return 146 
break;
case 77: return 147 
break;
case 78: return 148 
break;
case 79: return 31 
break;
case 80: return 18 
break;
case 81: return 29 
break;
case 82: return 30 
break;
case 83: return 24 
break;
case 84: return 27 
break;
case 85: return 114 
break;
case 86: return 116 
break;
case 87: return 117 
break;
case 88: yy_.yytext = yy_.yytext.slice(1,-1); return 32; 
break;
case 89: return 17; 
break;
case 90: yy_.yytext = yy_.yytext.slice(1); return 23; 
break;
case 91: yy_.yytext = yy_.yytext.slice(1); return 67; 
break;
case 92: return 15; 
break;
case 93: return 68
break;
case 94: return 56
break;
case 95: return 57
break;
case 96: return 144
break;
case 97: return 145
break;
case 98: return 35
break;
case 99: return 36
break;
case 100: return 40
break;
case 101: return 38
break;
case 102: return 37
break;
case 103: return 39
break;
case 104: return 59 
break;
case 105: return 41 
break;
case 106: return 42 
break;
case 107: return 45 
break;
case 108: return 53 
break;
case 109: return 52 
break;
case 110: return 44 
break;
case 111: return 43 
break;
case 112: return 50 
break;
case 113: return 51 
break;
case 114: return 48 
break;
case 115: return 49 
break;
case 116: return 47 
break;
case 117: return 46 
break;
case 118: return 25 
break;
case 119: return 54 
break;
case 120: return 34 
break;
case 121: return 55 
break;
case 122: return 20 
break;
case 123: return 22 
break;
case 124: return 5; 
break;
case 125: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:\$0\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:HASHPOS\b)/,/^(?:RID\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:HASHK1\b)/,/^(?:HASHK\b)/,/^(?:HASHSLEN\b)/,/^(?:HASHSDIGEST\b)/,/^(?:HASHS1\b)/,/^(?:HASHS\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:HASHP1\b)/,/^(?:HASHP\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:ARITH_BN254_ADDFP2\b)/,/^(?:ARITH_BN254_SUBFP2\b)/,/^(?:ARITH_BN254_MULFP2\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:SLT\b)/,/^(?:EQ\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:LT4\b)/,/^(?:CNT_ARITH\b)/,/^(?:CNT_BINARY\b)/,/^(?:CNT_KECCAK_F\b)/,/^(?:CNT_SHA256_F\b)/,/^(?:CNT_MEM_ALIGN\b)/,/^(?:CNT_PADDING_PG\b)/,/^(?:CNT_POSEIDON_G\b)/,/^(?:MEM_ALIGN_WR8\b)/,/^(?:MEM_ALIGN_RD\b)/,/^(?:MEM_ALIGN_WR\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:SAVE\b)/,/^(?:RESTORE\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}