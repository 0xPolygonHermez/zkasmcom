/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,15],$V2=[1,16],$V3=[1,24],$V4=[1,23],$V5=[1,34],$V6=[1,35],$V7=[1,32],$V8=[1,33],$V9=[1,17],$Va=[1,18],$Vb=[1,19],$Vc=[1,21],$Vd=[1,22],$Ve=[1,42],$Vf=[1,20],$Vg=[1,26],$Vh=[1,29],$Vi=[1,46],$Vj=[1,40],$Vk=[1,51],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,36],$Vs=[1,37],$Vt=[1,38],$Vu=[1,39],$Vv=[1,41],$Vw=[1,43],$Vx=[1,44],$Vy=[1,45],$Vz=[1,47],$VA=[1,48],$VB=[1,49],$VC=[1,50],$VD=[1,52],$VE=[5,13,18,20,21,29,32,33,35,36,38,42,45,46,47,49,50,54,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$VF=[1,65],$VG=[1,66],$VH=[1,67],$VI=[1,68],$VJ=[1,69],$VK=[1,70],$VL=[1,71],$VM=[1,72],$VN=[1,73],$VO=[1,74],$VP=[1,75],$VQ=[1,78],$VR=[1,79],$VS=[1,80],$VT=[1,81],$VU=[1,82],$VV=[1,83],$VW=[1,84],$VX=[1,85],$VY=[1,86],$VZ=[1,87],$V_=[1,88],$V$=[1,89],$V01=[1,90],$V11=[1,91],$V21=[1,92],$V31=[1,93],$V41=[1,94],$V51=[1,95],$V61=[1,96],$V71=[1,97],$V81=[1,98],$V91=[1,99],$Va1=[1,100],$Vb1=[1,101],$Vc1=[1,102],$Vd1=[13,18],$Ve1=[13,18,53,54,75],$Vf1=[1,116],$Vg1=[13,18,53,54,55,75],$Vh1=[13,18,26,28,53,54,55,75],$Vi1=[2,161],$Vj1=[1,121],$Vk1=[13,26],$Vl1=[1,142],$Vm1=[1,144],$Vn1=[1,145],$Vo1=[1,147],$Vp1=[1,148],$Vq1=[1,150],$Vr1=[1,151],$Vs1=[1,152],$Vt1=[1,153],$Vu1=[1,167],$Vv1=[1,166],$Vw1=[1,171],$Vx1=[1,172],$Vy1=[1,199],$Vz1=[1,196],$VA1=[1,194],$VB1=[1,195],$VC1=[1,197],$VD1=[1,198],$VE1=[26,28],$VF1=[1,203],$VG1=[1,204],$VH1=[1,205],$VI1=[1,206],$VJ1=[1,207],$VK1=[1,215],$VL1=[13,18,26],$VM1=[5,13,18,20,21,29,32,33,35,36,38,42,45,46,47,49,50,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$VN1=[1,245],$VO1=[1,246],$VP1=[1,247],$VQ1=[1,248],$VR1=[1,249],$VS1=[1,250],$VT1=[1,251],$VU1=[1,252],$VV1=[1,253],$VW1=[1,254],$VX1=[1,255],$VY1=[1,256],$VZ1=[1,257],$V_1=[1,258],$V$1=[1,259],$V02=[1,260],$V12=[1,261],$V22=[1,262],$V32=[1,263],$V42=[1,264],$V52=[5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V62=[5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V72=[5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,59,60,61,62,63,64,65,66,67,68,69,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V82=[5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,61,62,63,64,65,66,67,68,69,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],$V92=[5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,61,62,63,68,69,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"macros":14,"macroCall":15,"macroDef":16,"assignment":17,":":18,"opList":19,"IDENTIFIER":20,"BEGIN_MACRO":21,"params":22,"paramListItem":23,"reg":24,"paramList":25,",":26,"(":27,")":28,"MACRO":29,"macroParams":30,"macroParam":31,"CONSTID":32,"REFERENCE":33,"counter":34,"NUMBER":35,"NUMBERL":36,"specific_addr":37,"VAR":38,"scope":39,"[":40,"]":41,"CONST":42,"=":43,"nexpr":44,"CONSTL":45,"COMMAND":46,"MACRO_DEFINITION":47,"GLOBAL":48,"CTX":49,"INCLUDE":50,"STRING":51,"??":52,"+":53,"-":54,"*":55,"**":56,"%":57,"/":58,"<<":59,">>":60,"|":61,"&":62,"^":63,"<":64,">":65,"<=":66,">=":67,"==":68,"!=":69,"&&":70,"||":71,"!":72,"?":73,"inRegsSum":74,"=>":75,"regsList":76,"inRegP":77,"inReg":78,"TAG":79,"op":80,"MLOAD":81,"addr":82,"MSTORE":83,"HASHK":84,"hashId":85,"HASHK1":86,"HASHKLEN":87,"HASHKDIGEST":88,"HASHP":89,"HASHP1":90,"HASHPLEN":91,"HASHPDIGEST":92,"JMP":93,"jmpCond":94,"jmpNotCond":95,"RR":96,"E":97,"CALL":98,"RETURN":99,"ASSERT":100,"SLOAD":101,"SSTORE":102,"ARITH":103,"ARITH_ECADD_DIFFERENT":104,"ARITH_ECADD_SAME":105,"ADD":106,"SUB":107,"LT":108,"SLT":109,"EQ":110,"AND":111,"OR":112,"XOR":113,"MEM_ALIGN_RD":114,"MEM_ALIGN_WR":115,"MEM_ALIGN_WR8":116,"REPEAT":117,"RCX":118,"JMPN":119,"JMPC":120,"JMPZ":121,"JMPNC":122,"JMPNZ":123,"CNT_ARITH":124,"CNT_BINARY":125,"CNT_KECCAK_F":126,"CNT_MEM_ALIGN":127,"CNT_PADDING_PG":128,"CNT_POSEIDON_G":129,"A":130,"B":131,"C":132,"D":133,"SR":134,"SP":135,"PC":136,"GAS":137,"zkPC":138,"STEP":139,"HASHPOS":140,"ROTL_C":141,"P_REG":142,"++":143,"--":144,"SYS":145,"MEM":146,"STACK":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"LF",18:":",20:"IDENTIFIER",21:"BEGIN_MACRO",26:",",27:"(",28:")",29:"MACRO",32:"CONSTID",33:"REFERENCE",35:"NUMBER",36:"NUMBERL",38:"VAR",40:"[",41:"]",42:"CONST",43:"=",45:"CONSTL",46:"COMMAND",47:"MACRO_DEFINITION",48:"GLOBAL",49:"CTX",50:"INCLUDE",51:"STRING",52:"??",53:"+",54:"-",55:"*",56:"**",57:"%",58:"/",59:"<<",60:">>",61:"|",62:"&",63:"^",64:"<",65:">",66:"<=",67:">=",68:"==",69:"!=",70:"&&",71:"||",72:"!",73:"?",75:"=>",79:"TAG",81:"MLOAD",83:"MSTORE",84:"HASHK",86:"HASHK1",87:"HASHKLEN",88:"HASHKDIGEST",89:"HASHP",90:"HASHP1",91:"HASHPLEN",92:"HASHPDIGEST",93:"JMP",96:"RR",97:"E",98:"CALL",99:"RETURN",100:"ASSERT",101:"SLOAD",102:"SSTORE",103:"ARITH",104:"ARITH_ECADD_DIFFERENT",105:"ARITH_ECADD_SAME",106:"ADD",107:"SUB",108:"LT",109:"SLT",110:"EQ",111:"AND",112:"OR",113:"XOR",114:"MEM_ALIGN_RD",115:"MEM_ALIGN_WR",116:"MEM_ALIGN_WR8",117:"REPEAT",118:"RCX",119:"JMPN",120:"JMPC",121:"JMPZ",122:"JMPNC",123:"JMPNZ",124:"CNT_ARITH",125:"CNT_BINARY",126:"CNT_KECCAK_F",127:"CNT_MEM_ALIGN",128:"CNT_PADDING_PG",129:"CNT_POSEIDON_G",130:"A",131:"B",132:"C",133:"D",134:"SR",135:"SP",136:"PC",137:"GAS",138:"zkPC",139:"STEP",140:"HASHPOS",141:"ROTL_C",142:"P_REG",143:"++",144:"--",145:"SYS",146:"MEM",147:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[16,4],[23,1],[23,1],[25,1],[25,3],[22,2],[22,3],[15,1],[15,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[30,1],[30,3],[9,3],[9,6],[10,4],[10,4],[12,1],[14,1],[39,1],[39,1],[11,2],[44,1],[44,1],[44,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,5],[44,3],[17,3],[17,1],[74,3],[74,3],[74,2],[74,1],[77,3],[77,1],[78,1],[78,1],[78,1],[78,3],[78,3],[78,1],[78,1],[78,1],[78,1],[76,3],[76,1],[19,3],[19,1],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,6],[80,4],[80,6],[80,4],[80,4],[80,6],[80,6],[80,4],[80,4],[80,6],[80,6],[80,6],[80,6],[80,8],[80,8],[80,4],[80,6],[80,6],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,4],[94,1],[94,1],[94,1],[95,1],[95,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[82,1],[82,1],[82,1],[37,3],[37,3],[37,2],[37,2],[37,5],[37,5],[37,3],[37,5],[37,5],[37,3],[37,5],[37,5],[37,3],[37,3],[37,3],[85,1],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 11: case 12: case 13:

            this.$ = $$[$0];
        
break;
case 10:

            this.$ = null;
        
break;
case 14:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 15:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 16:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 17:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 18:

            this.$ = {type: "macrodef", identifier: $$[$0-2], params: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 19: case 20: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34:
 this.$ = $$[$0] 
break;
case 21: case 35:
 this.$ = [$$[$0]] 
break;
case 22:
 this.$ = $$[$0-2].slice(); this.$.push($$[$0]) 
break;
case 23:
 this.$ = [] 
break;
case 24:
 this.$ = $$[$0-1] 
break;
case 25:

            this.$ = {type: "macrocall", name: $$[$0], params: []};
            setLine(this.$, _$[$0]);
        
break;
case 26:

            this.$ = {type: "macrocall", name: $$[$0-3], params: $$[$0-2]};
            setLine(this.$, _$[$0-3]);
        
break;
case 36:
 this.$ = $$[$0-2].slice(); this.$.push($$[$0])
break;
case 37:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 38:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 39:

            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 40:

            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 41:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 42:

            this.$ = {type: "macro", macro: $$[$0]}
        
break;
case 45:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 46: case 47:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 48: case 88:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 49:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 50: case 51: case 52: case 53: case 54: case 55: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 56: case 70:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 71:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 72:

            this.$ = $$[$0-1]
        
break;
case 73:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 74:

            this.$ = {in: $$[$0], out: []}
        
break;
case 75:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 76:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 77:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 78: case 80: case 173:

            this.$ = $$[$0]
        
break;
case 79:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 81:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 82:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 83:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 84:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 85:

            this.$ = {type: "expl", values: [$$[$0-2], $$[$0]]}
        
break;
case 86:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 87:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 89:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 90:

            $$[$0-2].push($$[$0])
        
break;
case 91: case 93:

            this.$ = [$$[$0]]
        
break;
case 92:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 94:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 0;
        
break;
case 95:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 1;
        
break;
case 96:

            this.$ = $$[$0-1];
            this.$.hashK = 1;
        
break;
case 97:

            this.$ = $$[$0-1];
            this.$.hashK1 = 1;
        
break;
case 98:

            this.$ = $$[$0-1];
            this.$.hashKLen = 1;
        
break;
case 99:

            this.$ = $$[$0-1];
            this.$.hashKDigest = 1;
        
break;
case 100:

            this.$ = $$[$0-1];
            this.$.hashP = 1;
        
break;
case 101:

            this.$ = $$[$0-1];
            this.$.hashP1 = 1;
        
break;
case 102:

            this.$ = $$[$0-1];
            this.$.hashPLen = 1;
        
break;
case 103:

            this.$ = $$[$0-1];
            this.$.hashPDigest = 1;
        
break;
case 104:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1] }
        
break;
case 105:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 106:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-3], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 107:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: 'next', useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 108:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr:  $$[$0-1], useElseAddr: 1, elseAddr: $$[$0-3] }
        
break;
case 109:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0 }
        
break;
case 110:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0 }
        
break;
case 111:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3] }
        
break;
case 112:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3] }
        
break;
case 113:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: 'next' }
        
break;
case 114:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: 'next' }
        
break;
case 115:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 116:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3], useElseAddr: 1, elseAddr: 'next' }
        
break;
case 117:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 118:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 119:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 120:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-5], useElseAddr: 1, elseAddr: $$[$0-1] }
        
break;
case 121:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, useJmpAddr:1, jmpAddr: $$[$0-1], call: 1}
        
break;
case 122:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 0, indRR: 1, return: 0, call: 1}
        
break;
case 123:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 1, indRR: 0, return: 0, call: 1}
        
break;
case 124:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  call: 0, return: 1}
        
break;
case 125:

            this.$ = {assert: 1}
        
break;
case 126:

            this.$ = {sRD: 1}
        
break;
case 127:

            this.$ = {sWR: 1}
        
break;
case 128:

            this.$ = { arithEq0: 1, arithEq1: 0, arithEq2: 0}
        
break;
case 129:

            this.$ = { arithEq0: 0, arithEq1: 1, arithEq2: 0}
        
break;
case 130:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 1}
        
break;
case 131:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 132:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 133:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 134:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 135:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 136:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 137:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 138:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 139:

            this.$ = { memAlignRD: 1, memAlignWR: 0, memAlignWR8: 0}
        
break;
case 140:

            this.$ = { memAlignRD: 0, memAlignWR: 1, memAlignWR8: 0}
        
break;
case 141:

            this.$ = { memAlignRD: 0, memAlignWR: 0, memAlignWR8: 1}
        
break;
case 142:

            this.$ = { repeat: 1 }
        
break;
case 146:
 this.$ = 'JMPC' 
break;
case 147:
 this.$ = 'JMPZ' 
break;
case 148:
 this.$ = 'cntArith' 
break;
case 149:
 this.$ = 'cntBinary' 
break;
case 150:
 this.$ = 'cntKeccakF' 
break;
case 151:
 this.$ = 'cntMemAlign' 
break;
case 152:
 this.$ = 'cntPaddingPG' 
break;
case 153:
 this.$ = 'cntPoseidonG' 
break;
case 171:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 172:

            this.$ = { offset: $$[$0] }
        
break;
case 174:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
break;
case 175:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
break;
case 176:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 1, offset: 0, useCTX: 1}
break;
case 177:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: -1, offset: 0, useCTX: 1}
break;
case 178:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: $$[$0]}
        
break;
case 179:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: -$$[$0]}
        
break;
case 180:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: 0}
        
break;
case 181:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 182:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 183:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 184:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 185:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 186:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 187:

            this.$ = { offset: $$[$0-2], ind: 0, indRR: 1 }
        
break;
case 188:

            this.$ = { offset: $$[$0-2], ind: 1, indRR: 0 }
        
break;
case 189:

            this.$ = {ind: 0, indRR: 0, offset:$$[$0]}
        
break;
case 190:

            this.$ = {ind: 1, indRR: 0, offset:0}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,24:30,29:$V4,32:$V5,33:$V6,34:31,35:$V7,36:$V8,38:$V9,42:$Va,45:$Vb,46:$Vc,47:$Vd,49:$Ve,50:$Vf,54:$Vg,74:25,77:27,78:28,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},{1:[3]},{5:[1,59],6:60,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,24:30,29:$V4,32:$V5,33:$V6,34:31,35:$V7,36:$V8,38:$V9,42:$Va,45:$Vb,46:$Vc,47:$Vd,49:$Ve,50:$Vf,54:$Vg,74:25,77:27,78:28,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($VE,[2,3]),o($VE,[2,4]),o($VE,[2,5]),o($VE,[2,6]),o($VE,[2,7]),o($VE,[2,8]),o($VE,[2,9]),o($VE,[2,10]),o($VE,[2,11]),o($VE,[2,12]),o($VE,[2,13]),{13:[1,62],18:[1,61]},{19:63,80:64,81:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:76,95:77,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31,114:$V41,115:$V51,116:$V61,117:$V71,119:$V81,120:$V91,121:$Va1,122:$Vb1,123:$Vc1},{18:[1,103]},{39:104,48:[1,105],49:[1,106]},{32:[1,107]},{32:[1,108]},{51:[1,109]},o($VE,[2,41]),o($VE,[2,42]),o($VE,[2,25],{27:[1,110]}),{20:[1,111]},o($Vd1,[2,74],{53:[1,113],54:[1,114],75:[1,112]}),{24:30,32:$V5,33:$V6,34:31,35:$V7,36:$V8,49:$Ve,77:115,78:28,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($Ve1,[2,78],{55:$Vf1}),o($Vg1,[2,80]),o($Vg1,[2,81]),o($Vg1,[2,82]),o($Vg1,[2,83]),o($Vg1,[2,86],{56:[1,117]}),o($Vg1,[2,87],{56:[1,118]}),o($Vg1,[2,88]),o($Vg1,[2,89]),o($Vh1,[2,154]),o($Vh1,[2,155]),o($Vh1,[2,156]),o($Vh1,[2,157]),o($Vh1,[2,158]),o($Vh1,[2,159]),o($Vh1,[2,160]),o($Vh1,$Vi1),o($Vh1,[2,162]),o($Vh1,[2,163]),o($Vh1,[2,164]),o($Vh1,[2,165]),o($Vh1,[2,166]),o($Vh1,[2,167]),o($Vh1,[2,168]),o($Vh1,[2,169]),o($Vh1,[2,170]),o($Vh1,[2,148]),o($Vh1,[2,149]),o($Vh1,[2,150]),o($Vh1,[2,151]),o($Vh1,[2,152]),o($Vh1,[2,153]),{1:[2,1]},o($VE,[2,2]),{19:119,80:64,81:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:76,95:77,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31,114:$V41,115:$V51,116:$V61,117:$V71,119:$V81,120:$V91,121:$Va1,122:$Vb1,123:$Vc1},o($VE,[2,15]),{13:[1,120],26:$Vj1},o($Vk1,[2,93]),{27:[1,122]},{27:[1,123]},{27:[1,124]},{27:[1,125]},{27:[1,126]},{27:[1,127]},{27:[1,128]},{27:[1,129]},{27:[1,130]},{27:[1,131]},{27:[1,132]},{27:[1,133]},{27:[1,134]},{27:[1,135]},o($Vk1,[2,124]),o($Vk1,[2,125]),o($Vk1,[2,126]),o($Vk1,[2,127]),o($Vk1,[2,128]),o($Vk1,[2,129]),o($Vk1,[2,130]),o($Vk1,[2,131]),o($Vk1,[2,132]),o($Vk1,[2,133]),o($Vk1,[2,134]),o($Vk1,[2,135]),o($Vk1,[2,136]),o($Vk1,[2,137]),o($Vk1,[2,138]),o($Vk1,[2,139]),o($Vk1,[2,140]),o($Vk1,[2,141]),{27:[1,136]},{27:[2,143]},{27:[2,144]},{27:[2,145]},{27:[2,146]},{27:[2,147]},o($VE,[2,17]),{20:[1,137]},{20:[2,43]},{20:[2,44]},{43:[1,138]},{43:[1,139]},o($VE,[2,45]),{20:$Vl1,24:143,30:140,31:141,32:$Vm1,33:$Vn1,34:146,35:$Vo1,36:$Vp1,37:149,49:$Ve,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vq1,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,145:$Vr1,146:$Vs1,147:$Vt1},{22:154,27:[1,155]},{24:157,49:$Ve,76:156,96:$Vi,97:$Vj,118:$Vk,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},{24:30,32:$V5,33:$V6,34:31,35:$V7,36:$V8,49:$Ve,77:158,78:28,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},{24:30,32:$V5,33:$V6,34:31,35:$V7,36:$V8,49:$Ve,77:159,78:28,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($Ve1,[2,77],{55:$Vf1}),{24:30,32:$V5,33:$V6,34:31,35:$V7,36:$V8,49:$Ve,78:160,79:$Vh,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},{35:[1,161]},{36:[1,162]},{13:[1,163],26:$Vj1},o($VE,[2,16]),{80:164,81:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:76,95:77,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,113:$V31,114:$V41,115:$V51,116:$V61,117:$V71,119:$V81,120:$V91,121:$Va1,122:$Vb1,123:$Vc1},{20:$Vu1,37:168,82:165,135:$Vv1,145:$Vr1,146:$Vs1,147:$Vt1},{20:$Vu1,37:168,82:169,135:$Vv1,145:$Vr1,146:$Vs1,147:$Vt1},{35:$Vw1,85:170,97:$Vx1},{35:$Vw1,85:173,97:$Vx1},{35:$Vw1,85:174,97:$Vx1},{35:$Vw1,85:175,97:$Vx1},{35:$Vw1,85:176,97:$Vx1},{35:$Vw1,85:177,97:$Vx1},{35:$Vw1,85:178,97:$Vx1},{35:$Vw1,85:179,97:$Vx1},{20:[1,180],33:[1,183],96:[1,181],97:[1,182]},{20:[1,184],33:[1,187],96:[1,185],97:[1,186]},{20:[1,188]},{20:[1,189],33:[1,190]},{118:[1,191]},o($VE,[2,37],{40:[1,192]}),{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:193,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:200,54:$VC1,72:$VD1},{26:[1,202],28:[1,201]},o($VE1,[2,35]),o($VE1,[2,27],{53:$VF1}),o($VE1,[2,28]),o($VE1,[2,29]),o($VE1,[2,30]),o($VE1,[2,31]),o($VE1,[2,32]),o($VE1,[2,33]),o($VE1,[2,34]),o($VE1,$Vi1,{53:$VG1,54:$VH1,143:$VI1,144:$VJ1}),{18:[1,208]},{18:[1,209]},{18:[1,210]},{18:[1,211]},{20:$VK1,23:214,24:216,25:213,28:[1,212],49:$Ve,96:$Vi,97:$Vj,118:$Vk,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($Vd1,[2,73],{26:[1,217]}),o($VL1,[2,91]),o($Ve1,[2,75],{55:$Vf1}),o($Ve1,[2,76],{55:$Vf1}),o($Vg1,[2,79]),o($Vg1,[2,84]),o($Vg1,[2,85]),o($VE,[2,14]),o($Vk1,[2,92]),{28:[1,218]},{28:[2,171],53:$VG1,54:$VH1,143:$VI1,144:$VJ1},{28:[2,172],53:$VF1},{28:[2,173]},{28:[1,219]},{28:[1,220]},{28:[2,189]},{28:[2,190]},{28:[1,221]},{28:[1,222]},{28:[1,223]},{28:[1,224]},{28:[1,225]},{28:[1,226]},{28:[1,227]},{28:[1,228]},{28:[1,229]},{28:[1,230]},{53:[1,231]},{26:[1,233],28:[1,232]},{26:[1,235],28:[1,234]},{26:[1,237],28:[1,236]},{53:[1,238]},{26:[1,240],28:[1,239]},{28:[1,241]},{53:[1,242]},{28:[1,243]},{35:[1,244]},o($VM1,[2,39],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32,73:$V42}),o($V52,[2,46]),o($V52,[2,47]),o($V52,[2,48],{52:[1,265]}),{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:266,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:267,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:268,54:$VC1,72:$VD1},o($VM1,[2,40],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32,73:$V42}),o($VE,[2,26]),{20:$Vl1,24:143,31:269,32:$Vm1,33:$Vn1,34:146,35:$Vo1,36:$Vp1,37:149,49:$Ve,96:$Vi,97:$Vj,118:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vq1,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,145:$Vr1,146:$Vs1,147:$Vt1},{96:[1,270],97:[1,271]},{35:[1,272]},{35:[1,273]},o($VE1,[2,176]),o($VE1,[2,177]),{97:[1,274]},{97:[1,275]},{97:[1,276]},o($VE,[2,18]),{18:[2,23]},{26:[1,278],28:[1,277]},o($VE1,[2,21]),o($VE1,[2,19]),o($VE1,[2,20]),{24:279,49:$Ve,96:$Vi,97:$Vj,118:$Vk,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($Vk1,[2,94]),o($Vk1,[2,95]),o($Vk1,[2,96]),o($Vk1,[2,97]),o($Vk1,[2,98]),o($Vk1,[2,99]),o($Vk1,[2,100]),o($Vk1,[2,101]),o($Vk1,[2,102]),o($Vk1,[2,103]),o($Vk1,[2,104]),o($Vk1,[2,109]),o($Vk1,[2,110]),{96:[1,280],97:[1,281]},o($Vk1,[2,105]),{20:[1,282]},o($Vk1,[2,113]),{20:[1,283]},o($Vk1,[2,114]),{20:[1,284]},{96:[1,285],97:[1,286]},o($Vk1,[2,107]),{20:[1,287]},o($Vk1,[2,121]),{96:[1,288],97:[1,289]},o($Vk1,[2,142]),{41:[1,290]},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:291,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:292,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:293,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:294,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:295,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:296,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:297,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:298,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:299,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:300,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:301,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:302,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:303,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:304,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:305,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:306,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:307,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:308,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:309,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:310,54:$VC1,72:$VD1},{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:311,54:$VC1,72:$VD1},o($V62,[2,56],{55:$VP1,56:$VQ1,57:$VR1,58:$VS1}),o($V52,[2,70]),{28:[1,312],53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32,73:$V42},o($VE1,[2,36]),o($VE1,[2,187]),o($VE1,[2,188]),o($VE1,[2,174]),o($VE1,[2,175]),o($VE1,[2,180],{53:[1,313],54:[1,314]}),o($VE1,[2,183],{53:[1,315],54:[1,316]}),o($VE1,[2,186],{53:[1,317],54:[1,318]}),{18:[2,24]},{20:$VK1,23:319,24:216,49:$Ve,96:$Vi,97:$Vj,118:$Vk,130:$Vr,131:$Vs,132:$Vt,133:$Vu,134:$Vv,135:$Vw,136:$Vx,137:$Vy,138:$Vz,139:$VA,140:$VB,141:$VC,142:$VD},o($VL1,[2,90]),{28:[1,320]},{28:[1,321]},{28:[1,322]},{28:[1,323]},{28:[1,324]},{26:[1,326],28:[1,325]},{26:[1,328],28:[1,327]},{28:[1,329]},{28:[1,330]},{28:[1,331]},o($VE,[2,38]),o($V62,[2,50],{55:$VP1,56:$VQ1,57:$VR1,58:$VS1}),o($V62,[2,51],{55:$VP1,56:$VQ1,57:$VR1,58:$VS1}),o($V52,[2,52]),o($V52,[2,53]),o($V52,[2,54]),o($V52,[2,55]),o($V72,[2,57],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1}),o($V72,[2,58],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1}),o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,61,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,59],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12}),o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,61,62,63,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,60],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12}),o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,61,63,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,61],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,62:$VW1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12}),o($V82,[2,62],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1}),o($V82,[2,63],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1}),o($V82,[2,64],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1}),o($V82,[2,65],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1}),o($V92,[2,66],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1}),o($V92,[2,67],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1}),o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,70,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,68],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12}),o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,71,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,69],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22}),{18:[1,332],53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32,73:$V42},o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,73,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,49],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32}),o($V52,[2,72]),{35:[1,333]},{35:[1,334]},{35:[1,335]},{35:[1,336]},{35:[1,337]},{35:[1,338]},o($VE1,[2,22]),o($Vk1,[2,111]),o($Vk1,[2,112]),o($Vk1,[2,106]),o($Vk1,[2,117]),o($Vk1,[2,118]),o($Vk1,[2,115]),{20:[1,339]},o($Vk1,[2,116]),{20:[1,340]},o($Vk1,[2,108]),o($Vk1,[2,122]),o($Vk1,[2,123]),{27:$Vy1,32:$Vz1,35:$VA1,36:$VB1,44:341,54:$VC1,72:$VD1},o($VE1,[2,178]),o($VE1,[2,179]),o($VE1,[2,181]),o($VE1,[2,182]),o($VE1,[2,184]),o($VE1,[2,185]),{28:[1,342]},{28:[1,343]},o([5,13,18,20,21,28,29,32,33,35,36,38,42,45,46,47,49,50,79,96,97,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],[2,71],{53:$VN1,54:$VO1,55:$VP1,56:$VQ1,57:$VR1,58:$VS1,59:$VT1,60:$VU1,61:$VV1,62:$VW1,63:$VX1,64:$VY1,65:$VZ1,66:$V_1,67:$V$1,68:$V02,69:$V12,70:$V22,71:$V32,73:$V42}),o($Vk1,[2,119]),o($Vk1,[2,120])],
defaultActions: {59:[2,1],98:[2,143],99:[2,144],100:[2,145],101:[2,146],102:[2,147],105:[2,43],106:[2,44],168:[2,173],171:[2,189],172:[2,190],212:[2,23],277:[2,24]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 47 
break;
case 1: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 2: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 3: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 36; 
break;
case 4: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 35; 
break;
case 5: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 6: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 79; 
break;
case 7: return "LF";
break;
case 8: /* console.log("Empty spaces"); */ 
break;
case 9: return 130; 
break;
case 10: return 131; 
break;
case 11: return 132; 
break;
case 12: return 133; 
break;
case 13: return 97; 
break;
case 14: return 118; 
break;
case 15: return 134; 
break;
case 16: return 49; 
break;
case 17: return 135; 
break;
case 18: return 136; 
break;
case 19: return 137; 
break;
case 20: return 138; 
break;
case 21: return 96; 
break;
case 22: return 139; 
break;
case 23: return 141; 
break;
case 24: return 140; 
break;
case 25: return 81 
break;
case 26: return 83 
break;
case 27: return 87 
break;
case 28: return 88 
break;
case 29: return 86 
break;
case 30: return 84 
break;
case 31: return 91 
break;
case 32: return 92 
break;
case 33: return 90 
break;
case 34: return 89 
break;
case 35: return 93 
break;
case 36: return 120 
break;
case 37: return 121 
break;
case 38: return 123 
break;
case 39: return 122 
break;
case 40: return 119 
break;
case 41: return 98 
break;
case 42: return 99 
break;
case 43: return 100 
break;
case 44: return 101 
break;
case 45: return 102 
break;
case 46: return 103 
break;
case 47: return 104 
break;
case 48: return 105 
break;
case 49: return 106 
break;
case 50: return 107 
break;
case 51: return 108 
break;
case 52: return 109 
break;
case 53: return 110 
break;
case 54: return 111 
break;
case 55: return 112 
break;
case 56: return 113 
break;
case 57: return 124 
break;
case 58: return 125 
break;
case 59: return 126 
break;
case 60: return 127 
break;
case 61: return 128 
break;
case 62: return 129 
break;
case 63: return 116 
break;
case 64: return 114 
break;
case 65: return 115 
break;
case 66: return 145 
break;
case 67: return 146 
break;
case 68: return 147 
break;
case 69: return 50 
break;
case 70: return 38 
break;
case 71: return 48 
break;
case 72: return 49 
break;
case 73: return 42 
break;
case 74: return 45 
break;
case 75: return 117 
break;
case 76: return 21 
break;
case 77: return 'END_MACRO' 
break;
case 78: yy_.yytext = yy_.yytext.slice(1,-1); return 51; 
break;
case 79: return 29; 
break;
case 80: return 20; 
break;
case 81: yy_.yytext = yy_.yytext.slice(1); return 32; 
break;
case 82: yy_.yytext = yy_.yytext.slice(1); return 33; 
break;
case 83: return 18; 
break;
case 84: return 26
break;
case 85: return 27
break;
case 86: return 28
break;
case 87: return 143
break;
case 88: return 144
break;
case 89: return 53
break;
case 90: return 54
break;
case 91: return 58
break;
case 92: return 56
break;
case 93: return 55
break;
case 94: return 57
break;
case 95: return 75 
break;
case 96: return 59 
break;
case 97: return 60 
break;
case 98: return 63 
break;
case 99: return 71 
break;
case 100: return 70 
break;
case 101: return 62 
break;
case 102: return 61 
break;
case 103: return 68 
break;
case 104: return 69 
break;
case 105: return 66 
break;
case 106: return 67 
break;
case 107: return 65 
break;
case 108: return 64 
break;
case 109: return 43 
break;
case 110: return 72 
break;
case 111: return 52 
break;
case 112: return 73 
break;
case 113: return 40 
break;
case 114: return 41 
break;
case 115: return 5; 
break;
case 116: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:#macro[ \t]+[a-zA-Z_][a-zA-Z_0-9]*([^\#]|#(?!endmacro\b))*#endmacro\b)/,/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:HASHPOS\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:HASHK1\b)/,/^(?:HASHK\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:HASHP1\b)/,/^(?:HASHP\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:SLT\b)/,/^(?:EQ\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:CNT_ARITH\b)/,/^(?:CNT_BINARY\b)/,/^(?:CNT_KECCAK_F\b)/,/^(?:CNT_MEM_ALIGN\b)/,/^(?:CNT_PADDING_PG\b)/,/^(?:CNT_POSEIDON_G\b)/,/^(?:MEM_ALIGN_WR8\b)/,/^(?:MEM_ALIGN_RD\b)/,/^(?:MEM_ALIGN_WR\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:MACRO\b)/,/^(?:END_MACRO\b)/,/^(?:"[^"]+")/,/^(?:#[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}