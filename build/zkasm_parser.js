/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,26],$V5=[1,15],$V6=[1,28],$V7=[1,16],$V8=[1,18],$V9=[1,36],$Va=[1,17],$Vb=[1,27],$Vc=[1,20],$Vd=[1,23],$Ve=[1,29],$Vf=[1,40],$Vg=[1,34],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,35],$Vt=[1,37],$Vu=[1,38],$Vv=[1,39],$Vw=[1,41],$Vx=[1,42],$Vy=[1,43],$Vz=[1,44],$VA=[1,45],$VB=[5,13,15,17,18,21,23,24,27,28,30,31,33,36,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[1,62],$VG=[1,63],$VH=[1,64],$VI=[1,65],$VJ=[1,66],$VK=[1,67],$VL=[1,68],$VM=[1,69],$VN=[1,72],$VO=[1,73],$VP=[1,74],$VQ=[1,75],$VR=[1,76],$VS=[1,77],$VT=[1,78],$VU=[1,79],$VV=[1,80],$VW=[1,81],$VX=[1,82],$VY=[1,83],$VZ=[1,84],$V_=[1,85],$V$=[1,86],$V01=[1,87],$V11=[1,88],$V21=[1,89],$V31=[1,90],$V41=[1,91],$V51=[1,92],$V61=[1,93],$V71=[1,94],$V81=[1,95],$V91=[1,96],$Va1=[1,97],$Vb1=[1,98],$Vc1=[1,99],$Vd1=[1,100],$Ve1=[13,15],$Vf1=[13,15,35,36,59],$Vg1=[1,112],$Vh1=[13,15,35,36,37,59],$Vi1=[13,15,35,36,37,59,67],$Vj1=[1,116],$Vk1=[13,67],$Vl1=[1,148],$Vm1=[1,144],$Vn1=[1,145],$Vo1=[1,146],$Vp1=[1,147],$Vq1=[1,151],$Vr1=[1,152],$Vs1=[1,174],$Vt1=[1,176],$Vu1=[1,175],$Vv1=[1,177],$Vw1=[1,178],$Vx1=[1,179],$Vy1=[13,15,67],$Vz1=[5,13,15,17,18,21,23,24,27,28,30,31,33,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VA1=[1,217],$VB1=[1,218],$VC1=[1,219],$VD1=[1,220],$VE1=[1,221],$VF1=[1,222],$VG1=[1,223],$VH1=[1,224],$VI1=[1,225],$VJ1=[1,226],$VK1=[1,227],$VL1=[1,228],$VM1=[1,229],$VN1=[1,230],$VO1=[1,231],$VP1=[1,232],$VQ1=[1,233],$VR1=[1,234],$VS1=[1,235],$VT1=[1,236],$VU1=[5,13,15,17,18,21,23,24,27,28,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VV1=[5,13,15,17,18,21,23,24,27,28,30,31,33,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VW1=[5,13,15,17,18,21,23,24,27,28,30,31,33,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VX1=[5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,46,47,48,49,50,51,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],$VY1=[5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,50,51,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"assignment":14,":":15,"opList":16,"IDENTIFIER":17,"VAR":18,"scope":19,"[":20,"NUMBER":21,"]":22,"CONST":23,"CONSTID":24,"=":25,"nexpr":26,"CONSTL":27,"COMMAND":28,"GLOBAL":29,"CTX":30,"INCLUDE":31,"STRING":32,"NUMBERL":33,"??":34,"+":35,"-":36,"*":37,"**":38,"%":39,"/":40,"<<":41,">>":42,"|":43,"&":44,"^":45,"<":46,">":47,"<=":48,">=":49,"==":50,"!=":51,"&&":52,"||":53,"!":54,"?":55,"(":56,")":57,"inRegsSum":58,"=>":59,"regsList":60,"inRegP":61,"inReg":62,"TAG":63,"reg":64,"counter":65,"REFERENCE":66,",":67,"op":68,"MLOAD":69,"addr":70,"MSTORE":71,"HASHK":72,"hashId":73,"HASHK1":74,"HASHKLEN":75,"HASHKDIGEST":76,"HASHP":77,"HASHP1":78,"HASHPLEN":79,"HASHPDIGEST":80,"JMP":81,"jmpCond":82,"jmpNotCond":83,"RR":84,"E":85,"CALL":86,"RETURN":87,"ASSERT":88,"ECRECOVER":89,"SLOAD":90,"SSTORE":91,"ARITH":92,"ARITH_ECADD_DIFFERENT":93,"ARITH_ECADD_SAME":94,"SHL":95,"SHR":96,"ADD":97,"SUB":98,"LT":99,"SLT":100,"EQ":101,"AND":102,"OR":103,"XOR":104,"MEM_ALIGN_RD":105,"MEM_ALIGN_WR":106,"MEM_ALIGN_WR8":107,"INST_MAP_ROM":108,"REPEAT":109,"RCX":110,"JMPN":111,"JMPC":112,"JMPZ":113,"JMPNC":114,"JMPNZ":115,"CNT_ARITH":116,"CNT_BINARY":117,"CNT_KECCAK_F":118,"CNT_MEM_ALIGN":119,"CNT_PADDING_PG":120,"CNT_POSEIDON_G":121,"A":122,"B":123,"C":124,"D":125,"SR":126,"SP":127,"PC":128,"GAS":129,"zkPC":130,"STEP":131,"MAXMEM":132,"HASHPOS":133,"ROTL_C":134,"++":135,"--":136,"SYS":137,"MEM":138,"STACK":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"LF",15:":",17:"IDENTIFIER",18:"VAR",20:"[",21:"NUMBER",22:"]",23:"CONST",24:"CONSTID",25:"=",27:"CONSTL",28:"COMMAND",29:"GLOBAL",30:"CTX",31:"INCLUDE",32:"STRING",33:"NUMBERL",34:"??",35:"+",36:"-",37:"*",38:"**",39:"%",40:"/",41:"<<",42:">>",43:"|",44:"&",45:"^",46:"<",47:">",48:"<=",49:">=",50:"==",51:"!=",52:"&&",53:"||",54:"!",55:"?",56:"(",57:")",59:"=>",63:"TAG",66:"REFERENCE",67:",",69:"MLOAD",71:"MSTORE",72:"HASHK",74:"HASHK1",75:"HASHKLEN",76:"HASHKDIGEST",77:"HASHP",78:"HASHP1",79:"HASHPLEN",80:"HASHPDIGEST",81:"JMP",84:"RR",85:"E",86:"CALL",87:"RETURN",88:"ASSERT",89:"ECRECOVER",90:"SLOAD",91:"SSTORE",92:"ARITH",93:"ARITH_ECADD_DIFFERENT",94:"ARITH_ECADD_SAME",95:"SHL",96:"SHR",97:"ADD",98:"SUB",99:"LT",100:"SLT",101:"EQ",102:"AND",103:"OR",104:"XOR",105:"MEM_ALIGN_RD",106:"MEM_ALIGN_WR",107:"MEM_ALIGN_WR8",108:"INST_MAP_ROM",109:"REPEAT",110:"RCX",111:"JMPN",112:"JMPC",113:"JMPZ",114:"JMPNC",115:"JMPNZ",116:"CNT_ARITH",117:"CNT_BINARY",118:"CNT_KECCAK_F",119:"CNT_MEM_ALIGN",120:"CNT_PADDING_PG",121:"CNT_POSEIDON_G",122:"A",123:"B",124:"C",125:"D",126:"SR",127:"SP",128:"PC",129:"GAS",130:"zkPC",131:"STEP",132:"MAXMEM",133:"HASHPOS",134:"ROTL_C",135:"++",136:"--",137:"SYS",138:"MEM",139:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[9,3],[9,6],[10,4],[10,4],[12,1],[19,1],[19,1],[11,2],[26,1],[26,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,5],[26,3],[14,3],[14,1],[58,3],[58,3],[58,2],[58,1],[61,3],[61,1],[62,1],[62,1],[62,1],[62,3],[62,1],[62,1],[62,1],[62,1],[60,3],[60,1],[16,3],[16,1],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,4],[68,6],[68,4],[68,6],[68,4],[68,4],[68,6],[68,6],[68,4],[68,4],[68,6],[68,6],[68,6],[68,6],[68,8],[68,8],[68,4],[68,6],[68,6],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,4],[82,1],[82,1],[82,1],[83,1],[83,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[70,1],[70,3],[70,3],[70,2],[70,2],[70,5],[70,5],[70,3],[70,5],[70,5],[70,3],[70,5],[70,5],[70,3],[70,1],[70,3],[70,3],[73,1],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 9:

            this.$ = $$[$0];
        
break;
case 10:

            this.$ = null;
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 13:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 14:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 15:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 16:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 17:

            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 18:

            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 19:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 22:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 23: case 24:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 25: case 64:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 26:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 33: case 47:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 48:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 49:

            this.$ = $$[$0-1]
        
break;
case 50:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 51:

            this.$ = {in: $$[$0], out: []}
        
break;
case 52:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 53:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 54:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 55: case 57:

            this.$ = $$[$0]
        
break;
case 56:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 58:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 59:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 60:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 61:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 62:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 63:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 65:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 66:

            $$[$0-2].push($$[$0])
        
break;
case 67: case 69:

            this.$ = [$$[$0]]
        
break;
case 68:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 70:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 0;
        
break;
case 71:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 1;
        
break;
case 72:

            this.$ = $$[$0-1];
            this.$.hashK = 1;
        
break;
case 73:

            this.$ = $$[$0-1];
            this.$.hashK1 = 1;
        
break;
case 74:

            this.$ = $$[$0-1];
            this.$.hashKLen = 1;
        
break;
case 75:

            this.$ = $$[$0-1];
            this.$.hashKDigest = 1;
        
break;
case 76:

            this.$ = $$[$0-1];
            this.$.hashP = 1;
        
break;
case 77:

            this.$ = $$[$0-1];
            this.$.hashP1 = 1;
        
break;
case 78:

            this.$ = $$[$0-1];
            this.$.hashPLen = 1;
        
break;
case 79:

            this.$ = $$[$0-1];
            this.$.hashPDigest = 1;
        
break;
case 80: case 81:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1], elseAddr: 'next' }
        
break;
case 82:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-3], elseAddr: $$[$0-1] }
        
break;
case 83:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 1, jmpAddr: 'next', elseAddr: $$[$0-1] }
        
break;
case 84:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 1, jmpAddr: $$[$0-1], elseAddr: $$[$0-3] }
        
break;
case 85:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, elseAddr: 0 }
        
break;
case 86:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, elseAddr: 0 }
        
break;
case 87:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3], elseAddr: 0 }
        
break;
case 88:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3], elseAddr: 0 }
        
break;
case 89:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, elseAddr: 'next' }
        
break;
case 90:

            this.$ = { [$$[$0-3]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, elseAddr: 'next' }
        
break;
case 91:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-3], elseAddr: 'next' }
        
break;
case 92:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-3], elseAddr: 'next' }
        
break;
case 93:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: 0, elseAddr: $$[$0-1] }
        
break;
case 94:

            this.$ = { [$$[$0-5]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: 0, elseAddr: $$[$0-1] }
        
break;
case 95:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 0, indRR: 1, offset: $$[$0-5], elseAddr: $$[$0-1] }
        
break;
case 96:

            this.$ = { [$$[$0-7]]: 1, useJmpAddr: 0, ind: 1, indRR: 0, offset: $$[$0-5], elseAddr: $$[$0-1] }
        
break;
case 97:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, useJmpAddr:1, jmpAddr: $$[$0-1], call: 1}
        
break;
case 98:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 0, indRR: 1, call: 1}
        
break;
case 99:

            this.$ = {JMP: 0,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 1, indRR: 0, call: 1}
        
break;
case 100:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  ind: 0, indRR: 0, return: 1}
        
break;
case 101:

            this.$ = {assert: 1}
        
break;
case 102:

            this.$ = {ecRecover: 1}
        
break;
case 103:

            this.$ = {sRD: 1}
        
break;
case 104:

            this.$ = {sWR: 1}
        
break;
case 105:

            this.$ = { arithEq0: 1, arithEq1: 0, arithEq2: 0}
        
break;
case 106:

            this.$ = { arithEq0: 0, arithEq1: 1, arithEq2: 0}
        
break;
case 107:

            this.$ = { arithEq0: 0, arithEq1: 0, arithEq2: 1}
        
break;
case 108:

            this.$ = { shl: 1}
        
break;
case 109:

            this.$ = { shr: 1}
        
break;
case 110:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 111:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 112:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 113:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 114:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 115:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 116:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 117:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 118:

            this.$ = { memAlignRD: 1, memAlignWR: 0, memAlignWR8: 0}
        
break;
case 119:

            this.$ = { memAlignRD: 0, memAlignWR: 1, memAlignWR8: 0}
        
break;
case 120:

            this.$ = { memAlignRD: 0, memAlignWR: 0, memAlignWR8: 1}
        
break;
case 121:

            this.$ = { instMapRom: 1 }
        
break;
case 122:

            this.$ = { repeat: 1 }
        
break;
case 126:
 this.$ = 'JMPC' 
break;
case 127:
 this.$ = 'JMPZ' 
break;
case 128:
 this.$ = 'cntArith' 
break;
case 129:
 this.$ = 'cntBinary' 
break;
case 130:
 this.$ = 'cntKeccakF' 
break;
case 131:
 this.$ = 'cntMemAlign' 
break;
case 132:
 this.$ = 'cntPaddingPG' 
break;
case 133:
 this.$ = 'cntPoseidonG' 
break;
case 151:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 152:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
break;
case 153:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
break;
case 154:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: 1, offset: 0, useCTX: 1}
break;
case 155:

            this.$ = { isStack: 1, isMem:0, ind:0, indRR: 0, incStack: -1, offset: 0, useCTX: 1}
break;
case 156:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: $$[$0]}
        
break;
case 157:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: -$$[$0]}
        
break;
case 158:

            this.$ = { isStack: 0, isMem:0, ind:1, indRR: 0, incStack: 0, offset: 0}
        
break;
case 159:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 160:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 161:

            this.$ = { isStack: 0, isMem: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 162:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 163:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 164:

            this.$ = { isStack: 1, ind:1, indRR: 0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 165:

            this.$ = { offset: $$[$0] }
        
break;
case 166:

            this.$ = { offset: $$[$0-2], ind: 0, indRR: 1 }
        
break;
case 167:

            this.$ = { offset: $$[$0-2], ind: 1, indRR: 0 }
        
break;
case 168:

            this.$ = {ind: 0, indRR: 0, offset:$$[$0]}
        
break;
case 169:

            this.$ = {ind: 1, indRR: 0, offset:0}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,21:$V4,23:$V5,24:$V6,27:$V7,28:$V8,30:$V9,31:$Va,33:$Vb,36:$Vc,58:19,61:21,62:22,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},{1:[3]},{5:[1,53],6:54,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,21:$V4,23:$V5,24:$V6,27:$V7,28:$V8,30:$V9,31:$Va,33:$Vb,36:$Vc,58:19,61:21,62:22,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},o($VB,[2,3]),o($VB,[2,4]),o($VB,[2,5]),o($VB,[2,6]),o($VB,[2,7]),o($VB,[2,8]),o($VB,[2,9]),o($VB,[2,10]),{13:[1,56],15:[1,55]},{16:57,68:58,69:$VC,71:$VD,72:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:70,83:71,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,109:$V81,111:$V91,112:$Va1,113:$Vb1,114:$Vc1,115:$Vd1},{15:[1,101]},{19:102,29:[1,103],30:[1,104]},{24:[1,105]},{24:[1,106]},{32:[1,107]},o($VB,[2,19]),o($Ve1,[2,51],{35:[1,109],36:[1,110],59:[1,108]}),{21:$V4,24:$V6,30:$V9,33:$Vb,61:111,62:22,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},o($Vf1,[2,55],{37:$Vg1}),o($Vh1,[2,57]),o($Vh1,[2,58]),o($Vh1,[2,59]),o($Vh1,[2,60]),o($Vh1,[2,62],{38:[1,113]}),o($Vh1,[2,63]),o($Vh1,[2,64]),o($Vh1,[2,65]),o($Vi1,[2,134]),o($Vi1,[2,135]),o($Vi1,[2,136]),o($Vi1,[2,137]),o($Vi1,[2,138]),o($Vi1,[2,139]),o($Vi1,[2,140]),o($Vi1,[2,141]),o($Vi1,[2,142]),o($Vi1,[2,143]),o($Vi1,[2,144]),o($Vi1,[2,145]),o($Vi1,[2,146]),o($Vi1,[2,147]),o($Vi1,[2,148]),o($Vi1,[2,149]),o($Vi1,[2,150]),o($Vh1,[2,128]),o($Vh1,[2,129]),o($Vh1,[2,130]),o($Vh1,[2,131]),o($Vh1,[2,132]),o($Vh1,[2,133]),{1:[2,1]},o($VB,[2,2]),{16:114,68:58,69:$VC,71:$VD,72:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:70,83:71,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,109:$V81,111:$V91,112:$Va1,113:$Vb1,114:$Vc1,115:$Vd1},o($VB,[2,12]),{13:[1,115],67:$Vj1},o($Vk1,[2,69]),{56:[1,117]},{56:[1,118]},{56:[1,119]},{56:[1,120]},{56:[1,121]},{56:[1,122]},{56:[1,123]},{56:[1,124]},{56:[1,125]},{56:[1,126]},{56:[1,127]},{56:[1,128]},{56:[1,129]},{56:[1,130]},o($Vk1,[2,100]),o($Vk1,[2,101]),o($Vk1,[2,102]),o($Vk1,[2,103]),o($Vk1,[2,104]),o($Vk1,[2,105]),o($Vk1,[2,106]),o($Vk1,[2,107]),o($Vk1,[2,108]),o($Vk1,[2,109]),o($Vk1,[2,110]),o($Vk1,[2,111]),o($Vk1,[2,112]),o($Vk1,[2,113]),o($Vk1,[2,114]),o($Vk1,[2,115]),o($Vk1,[2,116]),o($Vk1,[2,117]),o($Vk1,[2,118]),o($Vk1,[2,119]),o($Vk1,[2,120]),o($Vk1,[2,121]),{56:[1,131]},{56:[2,123]},{56:[2,124]},{56:[2,125]},{56:[2,126]},{56:[2,127]},o($VB,[2,14]),{17:[1,132]},{17:[2,20]},{17:[2,21]},{25:[1,133]},{25:[1,134]},o($VB,[2,22]),{30:$V9,60:135,64:136,84:$Vf,85:$Vg,110:$Vh,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},{21:$V4,24:$V6,30:$V9,33:$Vb,61:137,62:22,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},{21:$V4,24:$V6,30:$V9,33:$Vb,61:138,62:22,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},o($Vf1,[2,54],{37:$Vg1}),{21:$V4,24:$V6,30:$V9,33:$Vb,62:139,63:$Vd,64:24,65:25,66:$Ve,84:$Vf,85:$Vg,110:$Vh,116:$Vi,117:$Vj,118:$Vk,119:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},{21:[1,140]},{13:[1,141],67:$Vj1},o($VB,[2,13]),{68:142,69:$VC,71:$VD,72:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:70,83:71,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,109:$V81,111:$V91,112:$Va1,113:$Vb1,114:$Vc1,115:$Vd1},{17:$Vl1,70:143,127:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1},{17:$Vl1,70:149,127:$Vm1,137:$Vn1,138:$Vo1,139:$Vp1},{21:$Vq1,73:150,85:$Vr1},{21:$Vq1,73:153,85:$Vr1},{21:$Vq1,73:154,85:$Vr1},{21:$Vq1,73:155,85:$Vr1},{21:$Vq1,73:156,85:$Vr1},{21:$Vq1,73:157,85:$Vr1},{21:$Vq1,73:158,85:$Vr1},{21:$Vq1,73:159,85:$Vr1},{17:[1,160],66:[1,163],84:[1,161],85:[1,162]},{17:[1,164],66:[1,167],84:[1,165],85:[1,166]},{17:[1,168]},{17:[1,169],66:[1,170]},{110:[1,171]},o($VB,[2,15],{20:[1,172]}),{21:$Vs1,24:$Vt1,26:173,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:180,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},o($Ve1,[2,50],{67:[1,181]}),o($Vy1,[2,67]),o($Vf1,[2,52],{37:$Vg1}),o($Vf1,[2,53],{37:$Vg1}),o($Vh1,[2,56]),o($Vh1,[2,61]),o($VB,[2,11]),o($Vk1,[2,68]),{57:[1,182]},{35:[1,183],36:[1,184],57:[2,151],135:[1,185],136:[1,186]},{15:[1,187]},{15:[1,188]},{15:[1,189]},{35:[1,190],57:[2,165]},{57:[1,191]},{57:[1,192]},{57:[2,168]},{57:[2,169]},{57:[1,193]},{57:[1,194]},{57:[1,195]},{57:[1,196]},{57:[1,197]},{57:[1,198]},{57:[1,199]},{57:[1,200]},{57:[1,201]},{57:[1,202]},{35:[1,203]},{57:[1,204],67:[1,205]},{57:[1,206],67:[1,207]},{57:[1,208],67:[1,209]},{35:[1,210]},{57:[1,211],67:[1,212]},{57:[1,213]},{35:[1,214]},{57:[1,215]},{21:[1,216]},o($Vz1,[2,17],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1,55:$VT1}),o($VU1,[2,23]),o($VU1,[2,24]),o($VU1,[2,25],{34:[1,237]}),{21:$Vs1,24:$Vt1,26:238,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:239,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:240,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},o($Vz1,[2,18],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1,55:$VT1}),{30:$V9,64:241,84:$Vf,85:$Vg,110:$Vh,122:$Vo,123:$Vp,124:$Vq,125:$Vr,126:$Vs,127:$Vt,128:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA},o($Vk1,[2,70]),{21:[1,242]},{21:[1,243]},{57:[2,154]},{57:[2,155]},{85:[1,244]},{85:[1,245]},{85:[1,246]},{84:[1,247],85:[1,248]},o($Vk1,[2,71]),o($Vk1,[2,72]),o($Vk1,[2,73]),o($Vk1,[2,74]),o($Vk1,[2,75]),o($Vk1,[2,76]),o($Vk1,[2,77]),o($Vk1,[2,78]),o($Vk1,[2,79]),o($Vk1,[2,80]),o($Vk1,[2,85]),o($Vk1,[2,86]),{84:[1,249],85:[1,250]},o($Vk1,[2,81]),{17:[1,251]},o($Vk1,[2,89]),{17:[1,252]},o($Vk1,[2,90]),{17:[1,253]},{84:[1,254],85:[1,255]},o($Vk1,[2,83]),{17:[1,256]},o($Vk1,[2,97]),{84:[1,257],85:[1,258]},o($Vk1,[2,122]),{22:[1,259]},{21:$Vs1,24:$Vt1,26:260,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:261,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:262,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:263,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:264,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:265,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:266,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:267,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:268,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:269,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:270,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:271,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:272,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:273,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:274,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:275,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:276,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:277,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:278,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:279,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{21:$Vs1,24:$Vt1,26:280,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},o($VV1,[2,33],{37:$VC1,38:$VD1,39:$VE1,40:$VF1}),o($VU1,[2,47]),{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1,55:$VT1,57:[1,281]},o($Vy1,[2,66]),{57:[2,152]},{57:[2,153]},{35:[1,282],36:[1,283],57:[2,158]},{35:[1,284],36:[1,285],57:[2,161]},{35:[1,286],36:[1,287],57:[2,164]},{57:[2,166]},{57:[2,167]},{57:[1,288]},{57:[1,289]},{57:[1,290]},{57:[1,291]},{57:[1,292]},{57:[1,293],67:[1,294]},{57:[1,295],67:[1,296]},{57:[1,297]},{57:[1,298]},{57:[1,299]},o($VB,[2,16]),o($VV1,[2,27],{37:$VC1,38:$VD1,39:$VE1,40:$VF1}),o($VV1,[2,28],{37:$VC1,38:$VD1,39:$VE1,40:$VF1}),o($VU1,[2,29]),o($VU1,[2,30]),o($VU1,[2,31]),o($VU1,[2,32]),o($VW1,[2,34],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1}),o($VW1,[2,35],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,36],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,44,45,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,37],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,43,45,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,38],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,44:$VJ1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1}),o($VX1,[2,39],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1}),o($VX1,[2,40],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1}),o($VX1,[2,41],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1}),o($VX1,[2,42],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1}),o($VY1,[2,43],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,46:$VL1,47:$VM1,48:$VN1,49:$VO1}),o($VY1,[2,44],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,46:$VL1,47:$VM1,48:$VN1,49:$VO1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,52,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,45],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1}),o([5,13,15,17,18,21,23,24,27,28,30,31,33,53,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,46],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1}),{15:[1,300],35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1,55:$VT1},o([5,13,15,17,18,21,23,24,27,28,30,31,33,55,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,26],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1}),o($VU1,[2,49]),{21:[1,301]},{21:[1,302]},{21:[1,303]},{21:[1,304]},{21:[1,305]},{21:[1,306]},o($Vk1,[2,87]),o($Vk1,[2,88]),o($Vk1,[2,82]),o($Vk1,[2,93]),o($Vk1,[2,94]),o($Vk1,[2,91]),{17:[1,307]},o($Vk1,[2,92]),{17:[1,308]},o($Vk1,[2,84]),o($Vk1,[2,98]),o($Vk1,[2,99]),{21:$Vs1,24:$Vt1,26:309,33:$Vu1,36:$Vv1,54:$Vw1,56:$Vx1},{57:[2,156]},{57:[2,157]},{57:[2,159]},{57:[2,160]},{57:[2,162]},{57:[2,163]},{57:[1,310]},{57:[1,311]},o([5,13,15,17,18,21,23,24,27,28,30,31,33,57,63,66,84,85,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],[2,48],{35:$VA1,36:$VB1,37:$VC1,38:$VD1,39:$VE1,40:$VF1,41:$VG1,42:$VH1,43:$VI1,44:$VJ1,45:$VK1,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,52:$VR1,53:$VS1,55:$VT1}),o($Vk1,[2,95]),o($Vk1,[2,96])],
defaultActions: {53:[2,1],96:[2,123],97:[2,124],98:[2,125],99:[2,126],100:[2,127],103:[2,20],104:[2,21],151:[2,168],152:[2,169],185:[2,154],186:[2,155],242:[2,152],243:[2,153],247:[2,166],248:[2,167],301:[2,156],302:[2,157],303:[2,159],304:[2,160],305:[2,162],306:[2,163]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 33; 
break;
case 3: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 21; 
break;
case 4: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 5: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 63; 
break;
case 6: return "LF";
break;
case 7: /* console.log("Empty spaces"); */ 
break;
case 8: return 122; 
break;
case 9: return 123; 
break;
case 10: return 124; 
break;
case 11: return 125; 
break;
case 12: return 85; 
break;
case 13: return 110; 
break;
case 14: return 126; 
break;
case 15: return 30; 
break;
case 16: return 127; 
break;
case 17: return 128; 
break;
case 18: return 129; 
break;
case 19: return 130; 
break;
case 20: return 84; 
break;
case 21: return 131; 
break;
case 22: return 134; 
break;
case 23: return 132; 
break;
case 24: return 133; 
break;
case 25: return 69 
break;
case 26: return 71 
break;
case 27: return 75 
break;
case 28: return 76 
break;
case 29: return 74 
break;
case 30: return 72 
break;
case 31: return 79 
break;
case 32: return 80 
break;
case 33: return 78 
break;
case 34: return 77 
break;
case 35: return 89 
break;
case 36: return 81 
break;
case 37: return 112 
break;
case 38: return 113 
break;
case 39: return 115 
break;
case 40: return 114 
break;
case 41: return 111 
break;
case 42: return 86 
break;
case 43: return 87 
break;
case 44: return 88 
break;
case 45: return 90 
break;
case 46: return 91 
break;
case 47: return 92 
break;
case 48: return 93 
break;
case 49: return 94 
break;
case 50: return 97 
break;
case 51: return 98 
break;
case 52: return 99 
break;
case 53: return 100 
break;
case 54: return 101 
break;
case 55: return 102 
break;
case 56: return 103 
break;
case 57: return 104 
break;
case 58: return 95 
break;
case 59: return 96 
break;
case 60: return 116 
break;
case 61: return 117 
break;
case 62: return 118 
break;
case 63: return 119 
break;
case 64: return 120 
break;
case 65: return 121 
break;
case 66: return 107 
break;
case 67: return 105 
break;
case 68: return 106 
break;
case 69: return 108 
break;
case 70: return 137 
break;
case 71: return 138 
break;
case 72: return 139 
break;
case 73: return 31 
break;
case 74: return 18 
break;
case 75: return 29 
break;
case 76: return 30 
break;
case 77: return 23 
break;
case 78: return 27 
break;
case 79: return 109 
break;
case 80: yy_.yytext = yy_.yytext.slice(1,-1); return 32; 
break;
case 81: return 17; 
break;
case 82: yy_.yytext = yy_.yytext.slice(1); return 24; 
break;
case 83: yy_.yytext = yy_.yytext.slice(1); return 66; 
break;
case 84: return 15; 
break;
case 85: return 67
break;
case 86: return 56
break;
case 87: return 57
break;
case 88: return 135
break;
case 89: return 136
break;
case 90: return 35
break;
case 91: return 36
break;
case 92: return 40
break;
case 93: return 38
break;
case 94: return 37
break;
case 95: return 39
break;
case 96: return 59 
break;
case 97: return 41 
break;
case 98: return 42 
break;
case 99: return 45 
break;
case 100: return 53 
break;
case 101: return 52 
break;
case 102: return 44 
break;
case 103: return 43 
break;
case 104: return 50 
break;
case 105: return 51 
break;
case 106: return 48 
break;
case 107: return 49 
break;
case 108: return 47 
break;
case 109: return 46 
break;
case 110: return 25 
break;
case 111: return 54 
break;
case 112: return 34 
break;
case 113: return 55 
break;
case 114: return 20 
break;
case 115: return 22 
break;
case 116: return 5; 
break;
case 117: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:MAXMEM\b)/,/^(?:HASHPOS\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:HASHK1\b)/,/^(?:HASHK\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:HASHP1\b)/,/^(?:HASHP\b)/,/^(?:ECRECOVER\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:SLT\b)/,/^(?:EQ\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:SHL\b)/,/^(?:SHR\b)/,/^(?:CNT_ARITH\b)/,/^(?:CNT_BINARY\b)/,/^(?:CNT_KECCAK_F\b)/,/^(?:CNT_MEM_ALIGN\b)/,/^(?:CNT_PADDING_PG\b)/,/^(?:CNT_POSEIDON_G\b)/,/^(?:MEM_ALIGN_WR8\b)/,/^(?:MEM_ALIGN_RD\b)/,/^(?:MEM_ALIGN_WR\b)/,/^(?:INST_MAP_ROM\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}