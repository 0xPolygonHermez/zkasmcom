/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,27],$V6=[1,16],$V7=[1,18],$V8=[1,35],$V9=[1,17],$Va=[1,25],$Vb=[1,26],$Vc=[1,20],$Vd=[1,23],$Ve=[1,28],$Vf=[1,39],$Vg=[1,33],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,34],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[1,43],$Vt=[5,13,15,17,18,20,21,24,25,27,28,30,31,34,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[1,61],$VG=[1,62],$VH=[1,63],$VI=[1,64],$VJ=[1,65],$VK=[1,66],$VL=[1,67],$VM=[1,68],$VN=[1,69],$VO=[1,70],$VP=[1,71],$VQ=[1,72],$VR=[1,73],$VS=[1,74],$VT=[1,75],$VU=[1,76],$VV=[1,77],$VW=[1,78],$VX=[1,79],$VY=[1,80],$VZ=[1,81],$V_=[1,82],$V$=[1,83],$V01=[1,84],$V11=[1,85],$V21=[1,86],$V31=[1,87],$V41=[13,15],$V51=[13,15,33,34,57],$V61=[1,99],$V71=[13,15,33,34,35,57],$V81=[13,15,33,34,35,57,64],$V91=[1,103],$Va1=[13,64],$Vb1=[1,134],$Vc1=[1,128],$Vd1=[1,129],$Ve1=[1,130],$Vf1=[1,131],$Vg1=[1,132],$Vh1=[1,133],$Vi1=[1,137],$Vj1=[1,138],$Vk1=[1,161],$Vl1=[1,159],$Vm1=[1,160],$Vn1=[1,162],$Vo1=[1,163],$Vp1=[1,164],$Vq1=[13,15,64],$Vr1=[5,13,15,17,18,20,21,24,25,27,28,30,31,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$Vs1=[1,202],$Vt1=[1,203],$Vu1=[1,204],$Vv1=[1,205],$Vw1=[1,206],$Vx1=[1,207],$Vy1=[1,208],$Vz1=[1,209],$VA1=[1,210],$VB1=[1,211],$VC1=[1,212],$VD1=[1,213],$VE1=[1,214],$VF1=[1,215],$VG1=[1,216],$VH1=[1,217],$VI1=[1,218],$VJ1=[1,219],$VK1=[1,220],$VL1=[1,221],$VM1=[5,13,15,17,18,20,21,24,25,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$VN1=[5,13,15,17,18,20,21,24,25,27,28,30,31,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$VO1=[5,13,15,17,18,20,21,24,25,27,28,30,31,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$VP1=[5,13,15,17,18,20,21,24,25,27,28,30,31,41,42,43,44,45,46,47,48,49,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],$VQ1=[5,13,15,17,18,20,21,24,25,27,28,30,31,41,42,43,48,49,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"label":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"assignment":14,":":15,"opList":16,"IDENTIFIER":17,"VAR":18,"scope":19,"CONST":20,"CONSTID":21,"=":22,"nexpr":23,"CONSTL":24,"COMMAND":25,"GLOBAL":26,"CTX":27,"INCLUDE":28,"STRING":29,"NUMBER":30,"NUMBERL":31,"??":32,"+":33,"-":34,"*":35,"**":36,"%":37,"/":38,"<<":39,">>":40,"|":41,"&":42,"^":43,"<":44,">":45,"<=":46,">=":47,"==":48,"!=":49,"&&":50,"||":51,"!":52,"?":53,"(":54,")":55,"inRegsSum":56,"=>":57,"regsList":58,"inRegP":59,"inReg":60,"TAG":61,"reg":62,"REFERENCE":63,",":64,"op":65,"MLOAD":66,"addr":67,"MSTORE":68,"HASHK":69,"hashId":70,"HASHKLEN":71,"HASHKDIGEST":72,"HASHP":73,"HASHPLEN":74,"HASHPDIGEST":75,"JMP":76,"RR":77,"E":78,"JMPC":79,"JMPN":80,"CALL":81,"RETURN":82,"ASSERT":83,"ECRECOVER":84,"SLOAD":85,"SSTORE":86,"ARITH":87,"ARITH_ECADD_DIFFERENT":88,"ARITH_ECADD_SAME":89,"SHL":90,"SHR":91,"NOP":92,"ADD":93,"SUB":94,"LT":95,"GT":96,"SLT":97,"SGT":98,"EQ":99,"ISZERO":100,"AND":101,"OR":102,"XOR":103,"NOT":104,"MEM_ALIGN_RD":105,"MEM_ALIGN_WR":106,"INST_MAP_ROM":107,"A":108,"B":109,"C":110,"D":111,"SR":112,"SP":113,"PC":114,"GAS":115,"zkPC":116,"STEP":117,"MAXMEM":118,"HASHPOS":119,"++":120,"--":121,"SYS":122,"MEM":123,"CODE":124,"STACK":125,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"LF",15:":",17:"IDENTIFIER",18:"VAR",20:"CONST",21:"CONSTID",22:"=",24:"CONSTL",25:"COMMAND",26:"GLOBAL",27:"CTX",28:"INCLUDE",29:"STRING",30:"NUMBER",31:"NUMBERL",32:"??",33:"+",34:"-",35:"*",36:"**",37:"%",38:"/",39:"<<",40:">>",41:"|",42:"&",43:"^",44:"<",45:">",46:"<=",47:">=",48:"==",49:"!=",50:"&&",51:"||",52:"!",53:"?",54:"(",55:")",57:"=>",61:"TAG",63:"REFERENCE",64:",",66:"MLOAD",68:"MSTORE",69:"HASHK",71:"HASHKLEN",72:"HASHKDIGEST",73:"HASHP",74:"HASHPLEN",75:"HASHPDIGEST",76:"JMP",77:"RR",78:"E",79:"JMPC",80:"JMPN",81:"CALL",82:"RETURN",83:"ASSERT",84:"ECRECOVER",85:"SLOAD",86:"SSTORE",87:"ARITH",88:"ARITH_ECADD_DIFFERENT",89:"ARITH_ECADD_SAME",90:"SHL",91:"SHR",92:"NOP",93:"ADD",94:"SUB",95:"LT",96:"GT",97:"SLT",98:"SGT",99:"EQ",100:"ISZERO",101:"AND",102:"OR",103:"XOR",104:"NOT",105:"MEM_ALIGN_RD",106:"MEM_ALIGN_WR",107:"INST_MAP_ROM",108:"A",109:"B",110:"C",111:"D",112:"SR",113:"SP",114:"PC",115:"GAS",116:"zkPC",117:"STEP",118:"MAXMEM",119:"HASHPOS",120:"++",121:"--",122:"SYS",123:"MEM",124:"CODE",125:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[8,2],[9,3],[10,4],[10,4],[12,1],[19,1],[19,1],[11,2],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,5],[23,3],[14,3],[14,1],[56,3],[56,3],[56,2],[56,1],[59,3],[59,1],[60,1],[60,1],[60,3],[60,1],[60,1],[60,1],[60,1],[58,3],[58,1],[16,3],[16,1],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,6],[65,6],[65,4],[65,4],[65,4],[65,6],[65,6],[65,4],[65,4],[65,6],[65,6],[65,4],[65,4],[65,6],[65,6],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[67,1],[67,3],[67,3],[67,2],[67,2],[67,1],[67,3],[67,3],[67,2],[67,2],[67,5],[67,5],[67,3],[67,5],[67,5],[67,3],[67,5],[67,5],[67,3],[67,5],[67,5],[67,3],[67,1],[67,3],[67,3],[70,1],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log($$[$0-1]);
            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 9:

            this.$ = $$[$0];
        
break;
case 10:

            this.$ = null;
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 13:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 14:

            this.$ = {type: "label", identifier: $$[$0-1]};
            setLine(this.$, _$[$0-1])
        
break;
case 15:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0]}
        
break;
case 16:

            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 17:

            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 18:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 21:

            this.$ = {type: "include", file: $$[$0]}
        
break;
case 22: case 23:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 24: case 62:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 25:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 32: case 46:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 47:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 48:

            this.$ = $$[$0-1]
        
break;
case 49:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 50:

            this.$ = {in: $$[$0], out: []}
        
break;
case 51:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 52:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 53:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 54: case 56:

            this.$ = $$[$0]
        
break;
case 55:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 57:

            this.$ = {type: 'TAG' , tag: $$[$0]}
        
break;
case 58:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 59:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 60:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 61:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 63:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 64:

            $$[$0-2].push($$[$0])
        
break;
case 65: case 67:

            this.$ = [$$[$0]]
        
break;
case 66:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 68:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 0;
        
break;
case 69:

            this.$ = $$[$0-1];
            this.$.mOp = 1;
            this.$.mWR = 1;
        
break;
case 70:

            this.$ = $$[$0-1];
            this.$.hashK = 1;
        
break;
case 71:

            this.$ = $$[$0-1];
            this.$.hashKLen = 1;
        
break;
case 72:

            this.$ = $$[$0-1];
            this.$.hashKDigest = 1;
        
break;
case 73:

            this.$ = $$[$0-1];
            this.$.hashP = 1;
        
break;
case 74:

            this.$ = $$[$0-1];
            this.$.hashPLen = 1;
        
break;
case 75:

            this.$ = $$[$0-1];
            this.$.hashPDigest = 1;
        
break;
case 76:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0, offset: $$[$0-1]}
        
break;
case 77:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0, ind: 0, indRR: 1, offset: 0}
        
break;
case 78:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0, ind: 1, indRR: 0, offset: 0}
        
break;
case 79:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0, ind: 0, indRR: 1, offset: $$[$0-3]}
        
break;
case 80:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0, ind: 1, indRR: 0, offset: $$[$0-3]}
        
break;
case 81:

            this.$ = {JMPC: 1, JMPN: 0, offset: $$[$0-1]}
        
break;
case 82:

            this.$ = {JMPC: 0, JMPN: 1, offset: $$[$0-1]}
        
break;
case 83:

            this.$ = {JMP: 1,  JMPC: 0, JMPN: 0, offset: $$[$0-1], assignment: { in: {type: 'add', values: [{type: 'REG', reg: 'zkPC'}, {type: 'CONST', const: 1}] }, out:['RR']}}
        
break;
case 84:

            this.$ = {JMP: 1,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 0, indRR: 1, assignment: { in: {type: 'add', values: [{type: 'REG', reg: 'zkPC'}, {type: 'CONST', const: 1}] }, out:['RR']}}
        
break;
case 85:

            this.$ = {JMP: 1,  JMPC: 0, JMPN: 0, offset: $$[$0-3], ind: 1, indRR: 0, assignment: { in: {type: 'add', values: [{type: 'REG', reg: 'zkPC'}, {type: 'CONST', const: 1}] }, out:['RR']}}
        
break;
case 86:

            this.$ = {JMP: 0, JMPC: 1, JMPN: 0, ind: 0, indRR: 1, offset: 0}
        
break;
case 87:

            this.$ = {JMP: 0, JMPC: 1, JMPN: 0, ind: 1, indRR: 0, offset: 0}
        
break;
case 88:

            this.$ = {JMP: 0, JMPC: 1, JMPN: 0, ind: 0, indRR: 1, offset: $$[$0-3]}
        
break;
case 89:

            this.$ = {JMP: 0, JMPC: 1, JMPN: 0, ind: 1, indRR: 0, offset: $$[$0-3]}
        
break;
case 90:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 1, ind: 0, indRR: 1, offset: 0}
        
break;
case 91:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 1, ind: 1, indRR: 0, offset: 0}
        
break;
case 92:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 1, ind: 0, indRR: 1, offset: $$[$0-3]}
        
break;
case 93:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 1, ind: 1, indRR: 0, offset: $$[$0-3]}
        
break;
case 94:

            this.$ = {JMP: 1, JMPC: 0, JMPN: 0,  ind: 0, indRR: 1, offset: 0}
        
break;
case 95:

            this.$ = {assert: 1}
        
break;
case 96:

            this.$ = {ecRecover: 1}
        
break;
case 97:

            this.$ = {sRD: 1}
        
break;
case 98:

            this.$ = {sWR: 1}
        
break;
case 99:

            this.$ = { arith: 1, arithEq0: 1}
        
break;
case 100:

            this.$ = { arith: 1, arithEq1: 1, arithEq3: 1}
        
break;
case 101:

            this.$ = { arith: 1, arithEq2: 1, arithEq3: 1}
        
break;
case 102:

            this.$ = { shl: 1}
        
break;
case 103:

            this.$ = { shr: 1}
        
break;
case 104:

            this.$ = { bin: 1, binOpcode: 0}
        
break;
case 105:

            this.$ = { bin: 1, binOpcode: 1}
        
break;
case 106:

            this.$ = { bin: 1, binOpcode: 2}
        
break;
case 107:

            this.$ = { bin: 1, binOpcode: 3}
        
break;
case 108:

            this.$ = { bin: 1, binOpcode: 4}
        
break;
case 109:

            this.$ = { bin: 1, binOpcode: 5}
        
break;
case 110:

            this.$ = { bin: 1, binOpcode: 6}
        
break;
case 111:

            this.$ = { bin: 1, binOpcode: 7}
        
break;
case 112:

            this.$ = { bin: 1, binOpcode: 8}
        
break;
case 113:

            this.$ = { bin: 1, binOpcode: 9}
        
break;
case 114:

            this.$ = { bin: 1, binOpcode: 10}
        
break;
case 115:

            this.$ = { bin: 1, binOpcode: 11}
        
break;
case 116:

            this.$ = { bin: 1, binOpcode: 12}
        
break;
case 117:

            this.$ = { memAlign: 1, memAlignWrite: 0}
        
break;
case 118:

            this.$ = { memAlign: 1, memAlignWrite: 1}
        
break;
case 119:

            this.$ = {instMapRom: 1}
        
break;
case 135:

            this.$ = { isStack: 1, isCode: 0, isMem:0, ind:0, indRR: 0, incCode:0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 136:

            this.$ = { isStack: 1, isCode: 0, isMem:0, ind:0, indRR: 0, incCode:0, incStack: 0, offset: $$[$0], useCTX: 1}
break;
case 137:

            this.$ = { isStack: 1, isCode: 0, isMem:0, ind:0, indRR: 0, incCode:0, incStack: 0, offset: -$$[$0], useCTX: 1}
break;
case 138:

            this.$ = { isStack: 1, isCode: 0, isMem:0, ind:0, indRR: 0, incStack: 1, offset: 0, useCTX: 1}
break;
case 139:

            this.$ = { isStack: 1, isCode: 0, isMem:0, ind:0, indRR: 0, incCode:0, incStack: -1, offset: 0, useCTX: 1}
break;
case 140:

            this.$ = { isStack: 0, isCode: 1, isMem:0, ind:0, indRR: 0, incCode:0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 141:

            this.$ = { isStack: 0, isCode: 1, isMem:0, ind:0, indRR: 0, incCode:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 142:

            this.$ = { isStack: 0, isCode: 1, isMem:0, ind:0, indRR: 0,     incCode:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 143:

            this.$ = { isStack: 0, isCode: 1, isMem:0, ind:0, indRR: 0, incCode:1, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 144:

            this.$ = { isStack: 0, isCode: 1, isMem:0, ind:0, indRR: 0, incCode:-1, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 145:

            this.$ = { isStack: 0, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: $$[$0]}
        
break;
case 146:

            this.$ = { isStack: 0, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: -$$[$0]}
        
break;
case 147:

            this.$ = { isStack: 0, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: 0}
        
break;
case 148:

            this.$ = { isStack: 0, isMem: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 149:

            this.$ = { isStack: 0, isMem: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 150:

            this.$ = { isStack: 0, isMem: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 151:

            this.$ = { isStack: 0, isCode: 1, ind:1, indRR: 0, incCode:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 152:

            this.$ = { isStack: 0, isCode: 1, ind:1, indRR: 0, incCode:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 153:

            this.$ = { isStack: 0, isCode: 1, ind:1, indRR: 0, incCode:0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 154:

            this.$ = { isStack: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 155:

            this.$ = { isStack: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 156:

            this.$ = { isStack: 1, isCode: 0, ind:1, indRR: 0, incCode:0, incStack: 0, offset: 0, useCTX: 1}
        
break;
case 157:

            this.$ = { offset: $$[$0] }
        
break;
case 158:

            this.$ = { offset: $$[$0-2], ind: 0, indRR: 1 }
        
break;
case 159:

            this.$ = { offset: $$[$0-2], ind: 1, indRR: 0 }
        
break;
case 160:

            this.$ = {ind: 0, indRR: 0, offset:$$[$0]}
        
break;
case 161:

            this.$ = {ind: 1, indRR: 0, offset:0}
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,20:$V4,21:$V5,24:$V6,25:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,34:$Vc,56:19,59:21,60:22,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},{1:[3]},{5:[1,44],6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,15:$V1,17:$V2,18:$V3,20:$V4,21:$V5,24:$V6,25:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,34:$Vc,56:19,59:21,60:22,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},o($Vt,[2,3]),o($Vt,[2,4]),o($Vt,[2,5]),o($Vt,[2,6]),o($Vt,[2,7]),o($Vt,[2,8]),o($Vt,[2,9]),o($Vt,[2,10]),{13:[1,47],15:[1,46]},{16:48,65:49,66:$Vu,68:$Vv,69:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX,100:$VY,101:$VZ,102:$V_,103:$V$,104:$V01,105:$V11,106:$V21,107:$V31},{15:[1,88]},{19:89,26:[1,90],27:[1,91]},{21:[1,92]},{21:[1,93]},{29:[1,94]},o($Vt,[2,18]),o($V41,[2,50],{33:[1,96],34:[1,97],57:[1,95]}),{21:$V5,27:$V8,30:$Va,31:$Vb,59:98,60:22,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},o($V51,[2,54],{35:$V61}),o($V71,[2,56]),o($V71,[2,57]),o($V71,[2,58]),o($V71,[2,60],{36:[1,100]}),o($V71,[2,61]),o($V71,[2,62]),o($V71,[2,63]),o($V81,[2,120]),o($V81,[2,121]),o($V81,[2,122]),o($V81,[2,123]),o($V81,[2,124]),o($V81,[2,125]),o($V81,[2,126]),o($V81,[2,127]),o($V81,[2,128]),o($V81,[2,129]),o($V81,[2,130]),o($V81,[2,131]),o($V81,[2,132]),o($V81,[2,133]),o($V81,[2,134]),{1:[2,1]},o($Vt,[2,2]),{16:101,65:49,66:$Vu,68:$Vv,69:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX,100:$VY,101:$VZ,102:$V_,103:$V$,104:$V01,105:$V11,106:$V21,107:$V31},o($Vt,[2,12]),{13:[1,102],64:$V91},o($Va1,[2,67]),{54:[1,104]},{54:[1,105]},{54:[1,106]},{54:[1,107]},{54:[1,108]},{54:[1,109]},{54:[1,110]},{54:[1,111]},{54:[1,112]},{54:[1,113]},{54:[1,114]},{54:[1,115]},o($Va1,[2,94]),o($Va1,[2,95]),o($Va1,[2,96]),o($Va1,[2,97]),o($Va1,[2,98]),o($Va1,[2,99]),o($Va1,[2,100]),o($Va1,[2,101]),o($Va1,[2,102]),o($Va1,[2,103]),o($Va1,[2,104]),o($Va1,[2,105]),o($Va1,[2,106]),o($Va1,[2,107]),o($Va1,[2,108]),o($Va1,[2,109]),o($Va1,[2,110]),o($Va1,[2,111]),o($Va1,[2,112]),o($Va1,[2,113]),o($Va1,[2,114]),o($Va1,[2,115]),o($Va1,[2,116]),o($Va1,[2,117]),o($Va1,[2,118]),o($Va1,[2,119]),o($Vt,[2,14]),{17:[1,116]},{17:[2,19]},{17:[2,20]},{22:[1,117]},{22:[1,118]},o($Vt,[2,21]),{27:$V8,58:119,62:120,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},{21:$V5,27:$V8,30:$Va,31:$Vb,59:121,60:22,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},{21:$V5,27:$V8,30:$Va,31:$Vb,59:122,60:22,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},o($V51,[2,53],{35:$V61}),{21:$V5,27:$V8,30:$Va,31:$Vb,60:123,61:$Vd,62:24,63:$Ve,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},{30:[1,124]},{13:[1,125],64:$V91},o($Vt,[2,13]),{65:126,66:$Vu,68:$Vv,69:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX,100:$VY,101:$VZ,102:$V_,103:$V$,104:$V01,105:$V11,106:$V21,107:$V31},{17:$Vb1,67:127,113:$Vc1,114:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1},{17:$Vb1,67:135,113:$Vc1,114:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1},{30:$Vi1,70:136,78:$Vj1},{30:$Vi1,70:139,78:$Vj1},{30:$Vi1,70:140,78:$Vj1},{30:$Vi1,70:141,78:$Vj1},{30:$Vi1,70:142,78:$Vj1},{30:$Vi1,70:143,78:$Vj1},{17:[1,144],63:[1,147],77:[1,145],78:[1,146]},{17:[1,148],63:[1,151],77:[1,149],78:[1,150]},{17:[1,152],63:[1,155],77:[1,153],78:[1,154]},{17:[1,156],63:[1,157]},o($Vt,[2,15]),{21:$Vk1,23:158,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:165,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},o($V41,[2,49],{64:[1,166]}),o($Vq1,[2,65]),o($V51,[2,51],{35:$V61}),o($V51,[2,52],{35:$V61}),o($V71,[2,55]),o($V71,[2,59]),o($Vt,[2,11]),o($Va1,[2,66]),{55:[1,167]},{33:[1,168],34:[1,169],55:[2,135],120:[1,170],121:[1,171]},{33:[1,172],34:[1,173],55:[2,140],120:[1,174],121:[1,175]},{15:[1,176]},{15:[1,177]},{15:[1,178]},{15:[1,179]},{33:[1,180],55:[2,157]},{55:[1,181]},{55:[1,182]},{55:[2,160]},{55:[2,161]},{55:[1,183]},{55:[1,184]},{55:[1,185]},{55:[1,186]},{55:[1,187]},{55:[1,188]},{55:[1,189]},{55:[1,190]},{33:[1,191]},{55:[1,192]},{55:[1,193]},{55:[1,194]},{33:[1,195]},{55:[1,196]},{55:[1,197]},{55:[1,198]},{33:[1,199]},{55:[1,200]},{33:[1,201]},o($Vr1,[2,16],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1,53:$VL1}),o($VM1,[2,22]),o($VM1,[2,23]),o($VM1,[2,24],{32:[1,222]}),{21:$Vk1,23:223,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:224,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:225,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},o($Vr1,[2,17],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1,53:$VL1}),{27:$V8,62:226,77:$Vf,78:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl,113:$Vm,114:$Vn,115:$Vo,116:$Vp,117:$Vq,118:$Vr,119:$Vs},o($Va1,[2,68]),{30:[1,227]},{30:[1,228]},{55:[2,138]},{55:[2,139]},{30:[1,229]},{30:[1,230]},{55:[2,143]},{55:[2,144]},{78:[1,231]},{78:[1,232]},{78:[1,233]},{78:[1,234]},{77:[1,235],78:[1,236]},o($Va1,[2,69]),o($Va1,[2,70]),o($Va1,[2,71]),o($Va1,[2,72]),o($Va1,[2,73]),o($Va1,[2,74]),o($Va1,[2,75]),o($Va1,[2,76]),o($Va1,[2,77]),o($Va1,[2,78]),{77:[1,237],78:[1,238]},o($Va1,[2,81]),o($Va1,[2,86]),o($Va1,[2,87]),{77:[1,239],78:[1,240]},o($Va1,[2,82]),o($Va1,[2,90]),o($Va1,[2,91]),{77:[1,241],78:[1,242]},o($Va1,[2,83]),{77:[1,243],78:[1,244]},{21:$Vk1,23:245,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:246,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:247,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:248,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:249,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:250,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:251,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:252,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:253,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:254,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:255,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:256,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:257,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:258,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:259,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:260,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:261,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:262,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:263,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:264,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{21:$Vk1,23:265,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},o($VN1,[2,32],{35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1}),o($VM1,[2,46]),{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1,53:$VL1,55:[1,266]},o($Vq1,[2,64]),{55:[2,136]},{55:[2,137]},{55:[2,141]},{55:[2,142]},{33:[1,267],34:[1,268],55:[2,147]},{33:[1,269],34:[1,270],55:[2,150]},{33:[1,271],34:[1,272],55:[2,153]},{33:[1,273],34:[1,274],55:[2,156]},{55:[2,158]},{55:[2,159]},{55:[1,275]},{55:[1,276]},{55:[1,277]},{55:[1,278]},{55:[1,279]},{55:[1,280]},{55:[1,281]},{55:[1,282]},o($VN1,[2,26],{35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1}),o($VN1,[2,27],{35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1}),o($VM1,[2,28]),o($VM1,[2,29]),o($VM1,[2,30]),o($VM1,[2,31]),o($VO1,[2,33],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1}),o($VO1,[2,34],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1}),o([5,13,15,17,18,20,21,24,25,27,28,30,31,41,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,35],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1}),o([5,13,15,17,18,20,21,24,25,27,28,30,31,41,42,43,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,36],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1}),o([5,13,15,17,18,20,21,24,25,27,28,30,31,41,43,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,37],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,42:$VB1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1}),o($VP1,[2,38],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1}),o($VP1,[2,39],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1}),o($VP1,[2,40],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1}),o($VP1,[2,41],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1}),o($VQ1,[2,42],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,44:$VD1,45:$VE1,46:$VF1,47:$VG1}),o($VQ1,[2,43],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,44:$VD1,45:$VE1,46:$VF1,47:$VG1}),o([5,13,15,17,18,20,21,24,25,27,28,30,31,50,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,44],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1}),o([5,13,15,17,18,20,21,24,25,27,28,30,31,51,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,45],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1}),{15:[1,283],33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1,53:$VL1},o([5,13,15,17,18,20,21,24,25,27,28,30,31,53,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,25],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1}),o($VM1,[2,48]),{30:[1,284]},{30:[1,285]},{30:[1,286]},{30:[1,287]},{30:[1,288]},{30:[1,289]},{30:[1,290]},{30:[1,291]},o($Va1,[2,79]),o($Va1,[2,80]),o($Va1,[2,88]),o($Va1,[2,89]),o($Va1,[2,92]),o($Va1,[2,93]),o($Va1,[2,84]),o($Va1,[2,85]),{21:$Vk1,23:292,30:$Vl1,31:$Vm1,34:$Vn1,52:$Vo1,54:$Vp1},{55:[2,145]},{55:[2,146]},{55:[2,148]},{55:[2,149]},{55:[2,151]},{55:[2,152]},{55:[2,154]},{55:[2,155]},o([5,13,15,17,18,20,21,24,25,27,28,30,31,55,61,63,77,78,108,109,110,111,112,113,114,115,116,117,118,119],[2,47],{33:$Vs1,34:$Vt1,35:$Vu1,36:$Vv1,37:$Vw1,38:$Vx1,39:$Vy1,40:$Vz1,41:$VA1,42:$VB1,43:$VC1,44:$VD1,45:$VE1,46:$VF1,47:$VG1,48:$VH1,49:$VI1,50:$VJ1,51:$VK1,53:$VL1})],
defaultActions: {44:[2,1],90:[2,19],91:[2,20],137:[2,160],138:[2,161],170:[2,138],171:[2,139],174:[2,143],175:[2,144],227:[2,136],228:[2,137],229:[2,141],230:[2,142],235:[2,158],236:[2,159],284:[2,145],285:[2,146],286:[2,148],287:[2,149],288:[2,151],289:[2,152],290:[2,154],291:[2,155]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 31; 
break;
case 2: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 30; 
break;
case 3: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 4: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 61; 
break;
case 5: return "LF";
break;
case 6: /* console.log("Empty spaces"); */ 
break;
case 7: return 108; 
break;
case 8: return 109; 
break;
case 9: return 110; 
break;
case 10: return 111; 
break;
case 11: return 78; 
break;
case 12: return 112; 
break;
case 13: return 27; 
break;
case 14: return 113; 
break;
case 15: return 114; 
break;
case 16: return 115; 
break;
case 17: return 116; 
break;
case 18: return 77; 
break;
case 19: return 117; 
break;
case 20: return 118; 
break;
case 21: return 119; 
break;
case 22: return 66 
break;
case 23: return 68 
break;
case 24: return 69 
break;
case 25: return 71 
break;
case 26: return 72 
break;
case 27: return 73 
break;
case 28: return 74 
break;
case 29: return 75 
break;
case 30: return 84 
break;
case 31: return 76 
break;
case 32: return 79 
break;
case 33: return 80 
break;
case 34: return 81 
break;
case 35: return 82 
break;
case 36: return 83 
break;
case 37: return 85 
break;
case 38: return 86 
break;
case 39: return 87 
break;
case 40: return 88 
break;
case 41: return 89 
break;
case 42: return 92 
break;
case 43: return 93 
break;
case 44: return 94 
break;
case 45: return 95 
break;
case 46: return 96 
break;
case 47: return 97 
break;
case 48: return 98 
break;
case 49: return 99 
break;
case 50: return 100 
break;
case 51: return 101 
break;
case 52: return 102 
break;
case 53: return 103 
break;
case 54: return 104 
break;
case 55: return 90 
break;
case 56: return 91 
break;
case 57: return 107 
break;
case 58: return 122 
break;
case 59: return 123 
break;
case 60: return 124 
break;
case 61: return 125 
break;
case 62: return 28 
break;
case 63: return 18 
break;
case 64: return 26 
break;
case 65: return 27 
break;
case 66: return 20 
break;
case 67: return 24 
break;
case 68: yy_.yytext = yy_.yytext.slice(1,-1); return 29; 
break;
case 69: return 17; 
break;
case 70: yy_.yytext = yy_.yytext.slice(1); return 21; 
break;
case 71: yy_.yytext = yy_.yytext.slice(1); return 63; 
break;
case 72: return 15; 
break;
case 73: return 64
break;
case 74: return 54
break;
case 75: return 55
break;
case 76: return 120
break;
case 77: return 121
break;
case 78: return 33
break;
case 79: return 34
break;
case 80: return 38
break;
case 81: return 36
break;
case 82: return 35
break;
case 83: return 37
break;
case 84: return 57 
break;
case 85: return 39 
break;
case 86: return 40 
break;
case 87: return 43 
break;
case 88: return 51 
break;
case 89: return 50 
break;
case 90: return 42 
break;
case 91: return 41 
break;
case 92: return 48 
break;
case 93: return 49 
break;
case 94: return 46 
break;
case 95: return 47 
break;
case 96: return 45 
break;
case 97: return 44 
break;
case 98: return 22 
break;
case 99: return 52 
break;
case 100: return 32 
break;
case 101: return 53 
break;
case 102: return 5; 
break;
case 103: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:GAS\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:MAXMEM\b)/,/^(?:HASHPOS\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:HASHK\b)/,/^(?:HASHKLEN\b)/,/^(?:HASHKDIGEST\b)/,/^(?:HASHP\b)/,/^(?:HASHPLEN\b)/,/^(?:HASHPDIGEST\b)/,/^(?:ECRECOVER\b)/,/^(?:JMP\b)/,/^(?:JMPC\b)/,/^(?:JMPN\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SLOAD\b)/,/^(?:SSTORE\b)/,/^(?:ARITH\b)/,/^(?:ARITH_ECADD_DIFFERENT\b)/,/^(?:ARITH_ECADD_SAME\b)/,/^(?:NOP\b)/,/^(?:ADD\b)/,/^(?:SUB\b)/,/^(?:LT\b)/,/^(?:GT\b)/,/^(?:SLT\b)/,/^(?:SGT\b)/,/^(?:EQ\b)/,/^(?:ISZERO\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:XOR\b)/,/^(?:NOT\b)/,/^(?:SHL\b)/,/^(?:SHR\b)/,/^(?:INST_MAP_ROM\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:CODE\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}