start:

        1 => B
        0 => C,D

        ;;;;;;;;;;;;;;;
        ;; bitwise OR
        ;;;;;;;;;;;;;;;

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 | 0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} => A
        ${0x01F34567FFFBCDEFFF1122334FFF667788FFAAFFCCDFFFFFFEDCBA9876FFFF10} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 | 0} => A
        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 | 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} => A
        ${0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} :ARITH

        ;;;;;;;;;;;;;;;
        ;; bitwise AND
        ;;;;;;;;;;;;;;;

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 & 0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} => A
        ${0x0020000089A000000000000004550000009900BB000DEEFFF000000000543200} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 & 0} => A
        ${0} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} => A
        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210} :ARITH

        ;;;;;;;;;;;;;;;
        ;; bitwise XOR
        ;;;;;;;;;;;;;;;

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 ^ 0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} => A
        ${0x01D34567765BCDEFFF1122334BAA66778866AA44CCD211000EDCBA9876ABCD10} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 ^ 0} => A
        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 ^ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} => A
        ${0xFEDCBA9876543210FFEEDDCCBBAA998877665544332211000123456789ABCDEF} :ARITH

        ;;;;;;;;;;;;;;;
        ;; bitwise NOT
        ;;;;;;;;;;;;;;;

        ${~0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} => A
        ${0} :ARITH

        ${~0} => A
        ${0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF} :ARITH

        ${~0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210} => A
        ${0xFEDCBA9876543210FFEEDDCCBBAA998877665544332211000123456789ABCDEF} :ARITH

        ;;;;;;;;;;;;;;;
        ;; SHL
        ;;;;;;;;;;;;;;;

        ${0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF << 1} => A
        ${0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE} :ARITH

        ${0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF << 255} => A
        ${0x8000000000000000000000000000000000000000000000000000000000000000} :ARITH

        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 << 36} => A
        ${0x9ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210000000000} :ARITH

        ;;;;;;;;;;;;;;;
        ;; IF with ?
        ;;;;;;;;;;;;;;;

        1 => E
        ${E ? 0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 : 0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} => A
        ${0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210} :ARITH

        0 => E
        ${E ? 0x0123456789ABCDEF00112233445566778899AABBCCDDEEFFFEDCBA9876543210 : 0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} => A
        ${0x00F00000FFF00000FF0000000FFF000000FF00FF000FFFFFF000000000FFFF00} :ARITH

        1 => E
        ${E ? (E + 3) : (E + 2)} => A
        4 :ARITH

        0 => E
        ${E ? (E + 2 + 1) : ((E + 6 * 2) * 2 + 3)} => A
        27 :ARITH

        :JMP(end)

end:
       0 => A,B,C,D,E,CTX, SP, PC, GAS, SR                 ; Set all registers to 0

longLoop:
        STEP-0x10000+40  : JMPC(longLoop2)
                        : JMP(finalLoop)
longLoop2:
        0
        0
        0
        0       ; 4
        0
        0
        0
        0       ; 8
        0
        0
        0
        0       ; 12
        0
        0
        0
        0       ; 16
        0
        0
        0
        0       ; 20
        0
        0
        0
        0       ; 24
        0
        0
        0
        0       ; 28
        0
        0
        0
        0       : JMP(longLoop) ; 32


finalLoop:
        STEP-0x10000+2  : JMPC(finalLoop)

                         : JMP(start)

opINVALID: