start:
        STEP => A
        0   :ASSERT


        0x101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2Fn => C
        ROTL_C => A     :JMPN(end)
        ROTL_C => A     :JMP_EQ(3, end)
        0x1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F10111213n: ASSERT

; prepare value of 384 bits

        0x2222222222n => B                                                          :HASHS16(E)
        0x1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F10111213n => A    :HASHS32(E)

PRAGMA MODE_384_BITS

        $ => C          :ARITH_256TO384
        
        0x22222222221415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F10111213n => A
        
        ${FROM_384_TO_256_H(C)} => B    :MODE_256_BITS
        ${FROM_384_TO_256_L(C)} => A    :MODE_256_BITS
        C :ARITH_256TO384

PRAGMA MODE_256_BITS
        
        0x1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F10111213n     :ASSERT
        B => A

        0x2222222222n :ASSERT
        
end:
       0 => A,B,C,D,E,CTX, SP, PC, GAS, SR

finalWait:
        ${beforeLast()}  : JMPN(finalWait)

                         : JMP(start)
opINVALID:

PRAGMA MODE_384_BITS

INCLUDE "lib_384.zkasm"
INCLUDE "lib_256.zkasm"

        C :ARITH_256TO384
