start:
        :JMP(main)

; include with opcodes
opcode_table:
        :JMP(routine_00)
        :JMP(routine_01)
        :JMP(routine_02)
        :JMP(routine_02)
        :JMP(routine_non_implemented)
        :JMP(routine_04)
opcode_table_last:
        :JMP(routine_05)

routine_00:
        100 => C
        :RETURN

routine_01:
        101 => C
        :RETURN

routine_02:
        102 => C
        :RETURN

routine_05:
        105 => C
        :RETURN

routine_04:
        104 => C
        :RETURN

routine_non_implemented:
        ; TODO
        :RETURN

main:
        ; assert table
        @opcode_table_last - @opcode_table => A
        6   :ASSERT

        ; opcode 2
        2 => RR
        :CALL(@opcode_table + RR)
        ${dump(C)}


end:
       0 => A,B,C,D,E,CTX, SP, PC, GAS, MAXMEM, SR                 ; Set all registers to 0

longLoop:
        STEP-0x10000+40  : JMPC(longLoop2)
                        : JMP(finalLoop)
longLoop2:
        0
        0
        0
        0       ; 4
        0
        0
        0
        0       ; 8
        0
        0
        0
        0       ; 12
        0
        0
        0
        0       ; 16
        0
        0
        0
        0       ; 20
        0
        0
        0
        0       ; 24
        0
        0
        0
        0       ; 28
        0
        0
        0
        0       : JMP(longLoop) ; 32


finalLoop:
        STEP-0x10000+2  : JMPC(finalLoop)

                         : JMP(start)

opINVALID: